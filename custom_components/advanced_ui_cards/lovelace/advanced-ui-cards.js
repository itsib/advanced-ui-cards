const ICONS = {
  "reload-config": {
    path: "M18 14.5c1.1 0 2.1.4 2.8 1.2l1.2-1.2v4h-4l1.8-1.8c-.5-.4-1.1-.7-1.8-.7c-1.4 0-2.5 1.1-2.5 2.5S16.6 21 18 21c.8 0 1.5-.4 2-1h1.7c-.6 1.5-2 2.5-3.7 2.5c-2.2 0-4-1.8-4-4s1.8-4 4-4m-6.5 4c0-1.1.3-2.1.7-3H12c-1.9 0-3.5-1.6-3.5-3.5s1.6-3.5 3.5-3.5s3.5 1.6 3.5 3.5c0 .2 0 .4-.1.5c.8-.3 1.6-.5 2.6-.5c.5 0 1 .1 1.5.2V12c0-.3 0-.7-.1-1l2.1-1.6c.2-.2.2-.4.1-.6l-2-3.5c-.1-.3-.3-.3-.6-.3l-2.5 1c-.5-.4-1.1-.7-1.7-1l-.4-2.7c.1-.1-.2-.3-.4-.3h-4c-.2 0-.5.2-.5.4l-.4 2.7c-.6.2-1.1.6-1.7.9L5 5c-.3 0-.5 0-.7.3l-2 3.5c-.1.2 0 .4.2.6L4.6 11c0 .3-.1.7-.1 1s0 .7.1 1l-2.1 1.7c-.2.2-.2.4-.1.6l2 3.5c.1.2.3.2.6.2l2.5-1c.5.4 1.1.7 1.7 1l.4 2.7c0 .2.2.4.5.4h2.5c-.7-1.1-1.1-2.3-1.1-3.6",
    keywords: ["reload", "gear", "config"]
  },
  brain: {
    path: "m7.1 22q-0.34 0-0.64-0.17t-0.45-0.48l-2.4-4.3h1.8l1.2 2.5h2.9v-1.2h-2.1l-1.2-2.5h-3.2l-1.8-3.1q-0.062-0.16-0.11-0.31-0.046-0.16-0.048-0.31 0-0.12 0.16-0.62l1.8-3.1h3.2l1.2-2.5h2.1v-1.2h-2.9l-1.2 2.5h-1.8l2.4-4.3q0.16-0.31 0.45-0.48 0.3-0.17 0.64-0.17h3q0.53 0 0.89 0.36 0.36 0.36 0.36 0.89v5h-1.9l-1.2 1.2h3.1v3.7h-2.8l-1.2-2.5h-2.9l-1.2 1.2h3.4l1.2 2.5h3.5v6.2q0 0.53-0.36 0.89-0.36 0.36-0.89 0.36zm6.8 0q-0.53 0-0.89-0.36-0.36-0.36-0.36-0.89v-6.2h3.5l1.2-2.5h3.4l-1.2-1.2h-2.9l-1.2 2.5h-2.8v-3.7h3.1l-1.2-1.2h-1.9v-5q0-0.53 0.36-0.89 0.36-0.36 0.89-0.36h3q0.34 0 0.64 0.17 0.3 0.17 0.45 0.48l2.4 4.3h-1.8l-1.2-2.5h-2.9v1.2h2.1l1.2 2.5h3.2l1.8 3.1q0.062 0.16 0.11 0.31 0.048 0.16 0.046 0.31 0 0.12-0.16 0.62l-1.8 3.1h-3.2l-1.2 2.5h-2.1v1.2h2.9l1.2-2.5h1.8l-2.4 4.3q-0.16 0.31-0.45 0.48-0.3 0.17-0.64 0.17z",
    keywords: ["brain", "intelligence", "main"]
  },
  "maria-db": {
    path: "M23.157 4.412c-.676.284-.79.31-1.673.372c-.65.045-.757.057-1.212.209c-.75.246-1.395.75-2.02 1.59c-.296.398-1.249 1.913-1.249 1.988c0 .057-.65.998-.915 1.32c-.574.713-1.08 1.079-2.14 1.59c-.77.36-1.224.524-4.102 1.477c-1.073.353-2.133.738-2.367.864c-.852.449-1.515 1.036-2.203 1.938c-1.003 1.32-.972 1.313-3.042.947a12 12 0 0 0-.675-.063c-.644-.05-1.023.044-1.332.334L0 17.193l.177.088c.094.05.353.234.561.398c.215.17.461.347.55.391c.088.044.17.088.183.101s-.089.17-.228.353c-.435.581-.593.871-.574 1.048c.019.164.032.17.43.17c.517-.006.826-.056 1.261-.208c.65-.233 2.058-.94 2.784-1.4c.776-.5 1.717-.998 1.956-1.042c.082-.02.354-.07.594-.114c.58-.107 1.464-.095 2.587.05c.108.013.373.045.6.064c.227.025.43.057.454.076c.026.012.474.037.998.056c.934.026 1.104.007 1.3-.189c.126-.133.385-.631.498-.985c.209-.643.417-.921.366-.492c-.113.966-.322 1.692-.713 2.411c-.259.499-.663 1.092-.934 1.395c-.322.347-.315.36.088.315c.619-.063 1.471-.397 2.096-.82c.827-.562 1.647-1.691 2.19-3.03c.107-.27.22-.22.183.083c-.013.094-.038.315-.057.498l-.031.328l.353-.202c.833-.48 1.414-1.262 2.127-2.884c.227-.518.877-2.922 1.073-3.976a10 10 0 0 1 .271-1.042c.127-.429.196-.555.48-.858c.183-.19.625-.555.978-.808c.72-.505.953-.75 1.187-1.205c.208-.417.284-1.13.132-1.357c-.132-.202-.284-.196-.763.006",
    keywords: ["database", "sql", "maria", "db"]
  },
  mosquitto: {
    path: "m2.9 18s-0.85-0.98-1.5-1.9c-2.7-4.8-1.6-11 2.6-15l5.1 4.5c-0.63 0.39-1.2 0.92-1.6 1.6-0.49 0.78-0.79 1.7-0.79 2.7 0 2.2 1.5 4 3.4 4.8l0.17 2.4c-3.3-0.66-5.8-3.5-5.8-7 0-1.6 0.49-3 1.4-4.1l-1.6-1.5-0.0061-0.0049c-2.7 3.5-2.5 8.4 0.36 12zm11-2.9c2-0.66 3.4-2.6 3.4-4.8 0-0.98-0.29-2-0.79-2.7-0.4-0.63-0.93-1.2-1.6-1.6l3.3-3-1.6e-4 -1.7e-4 1.9-1.6c4.1 3.6 5.1 9.7 2.6 15l-1.5 2-1.7-1.6c2.9-3.3 3-8.3 0.36-12l-0.0061 0.0049-1.6 1.5c0.84 1.2 1.4 2.6 1.4 4.1 0 3.4-2.5 6.4-5.8 7zm-1.6 8 0.84-8.3 0.25-1.9c0.98-0.41 1.7-1.5 1.7-2.6 0-1.6-1.2-2.9-2.9-2.9-1.6 0-2.9 1.2-2.9 2.9 0 1.2 0.7 2.1 1.7 2.6l0.22 1.7z",
    keywords: ["database", "mqtt", "db", "mosquitto", "broker"]
  },
  "adguard-home": {
    "keywords": [],
    "path": "M11.999 2c-3.05 0-6.727.717-9.755 2.295 0 3.409-.042 11.902 9.755 17.705 9.798-5.802 9.757-14.296 9.757-17.705C18.728 2.717 15.049 2 11.999 2zm5.232 5.234c.1.023.204.073.312.16l-5.9 7.95-4.268-5.012c.282-.206 1.483-.986 2.368.036l1.852 2.23 4.92-5.117h.008c.157-.142.41-.316.708-.247z"
  },
  "apple-tv": {
    "keywords": [],
    "path": "M7.189 6.9s-.932.005-1.602.888c-.596.785-.444 1.457-.444 1.457s.808.14 1.519-.714c.666-.8.527-1.63.527-1.63zm4.47.615v2.314h-.939v1.403h.94v4.098c0 1.089.64 1.756 1.851 1.756.39 0 .763-.054 1.117-.163.354-.11.653-.218.898-.327l-.367-1.443c-.11.045-.613.258-.994.258-.402 0-.68-.2-.68-.694v-3.485h1.497V9.829h-1.498V7.515zM7.046 9.353c-.832 0-1.472.474-1.817.474-.401 0-1-.446-1.773-.446C2.267 9.381 1 10.445 1 12.474 1 14.534 2.496 17.1 3.68 17.1c.413 0 1.048-.417 1.688-.417.628 0 1.091.401 1.687.401 1.298 0 2.258-2.703 2.258-2.703s-1.374-.532-1.374-2.076c0-1.368 1.103-1.932 1.103-1.932s-.564-1.02-1.998-1.02zm8.726.476 2.628 7.134h1.974L23 9.83h-1.715l-1.824 5.65-1.811-5.65z"
  },
  "asus": {
    "keywords": [],
    "path": "m21.975 20.356-.013-.025a1.101 1.101 0 0 0-.087-.254v-.019l-8.96-17.492a1.008 1.008 0 0 0-1.812 0l-8.972 17.5v.012a1.325 1.344 0 0 0-.093.285c-.025.095-.038.19-.038.292.006.538.325 1.026.819 1.242h.006a1.318 1.337 0 0 0 .831.063l.087-.025c.094-.032.188-.07.263-.12l7.997-4.83 7.985 4.83a1.3 1.318 0 0 0 .35.145 1.312 1.33 0 0 0 .831-.063h.006A1.337 1.356 0 0 0 22 20.636c0-.096-.006-.19-.025-.286zm-17.876-.545 7.904-15.42 4.167 8.131zm9.516-3.803L16.932 14l2.968 5.78.019.032z"
  },
  "b-hyve": {
    "keywords": [],
    "path": "M6.5 2.474 1 12l5.5 9.526h11L23 12l-5.5-9.526zm1.565 4.432h1.16V9.37c1.675.002 3.398 0 5.094 0 .895 0 1.616.72 1.616 1.615v4.473c0 .895-.72 1.616-1.616 1.616-2.064-.038-6.254 0-6.254 0V6.906zm1.574 3.603a.413.413 0 0 0-.414.414v4.639c0 .23.185.414.414.414h4.722c.23 0 .414-.185.414-.414v-4.639a.413.413 0 0 0-.414-.414z"
  },
  "ceiling-downlight": {
    "keywords": [],
    "path": "M2 5v1l2 2h16l2-2V5zm9.5 5a.5.5 0 0 0-.5.5v5a.5.5 0 0 0 1 0v-5a.5.5 0 0 0-.5-.5zm-3.467.002a.5.5 0 0 0-.48.273l-2 4a.501.501 0 0 0 .894.45l2-4a.501.501 0 0 0-.414-.723zm6.934 0a.501.501 0 0 0-.414.723l2 4a.501.501 0 0 0 .894-.45l-2-4a.501.501 0 0 0-.48-.273z"
  },
  "ceiling-fan": {
    "keywords": [],
    "path": "M8 5v2h3v5.267A2 2 0 0 0 10 14v1h4v-1a2 2 0 0 0-1-1.733V7h3V5h-6zm-2 9c-2.21 0-4 .671-4 1.5 0 .828 1.79 1.5 4 1.5s4-.672 4-1.5c0-.829-1.79-1.5-4-1.5zm12 0c-2.21 0-4 .671-4 1.5 0 .828 1.79 1.5 4 1.5s4-.672 4-1.5c0-.829-1.79-1.5-4-1.5zm-8 2v1a2 2 0 1 0 4 0v-1z"
  },
  "ceiling-fan-light": {
    "keywords": [],
    "path": "M8 3.68v2h3v5.268a2 2 0 0 0-1 1.732v1h4v-1a2 2 0 0 0-1-1.732V5.68h3v-2h-6zm-2 9a4 1.5 0 0 0-4 1.5 4 1.5 0 0 0 4 1.5 4 1.5 0 0 0 4-1.5 4 1.5 0 0 0-4-1.5zm12 0a4 1.5 0 0 0-4 1.5 4 1.5 0 0 0 4 1.5 4 1.5 0 0 0 4-1.5 4 1.5 0 0 0-4-1.5zm-8 2v1a2 2 0 0 0 1 1.732 2 2 0 0 0 2 0 2 2 0 0 0 1-1.732v-1zm-.537 1.887-1.733 1 .5.867 1.733-1zm5.074 0-.5.867 1.732 1 .5-.867zM11.5 18.32v2h1v-2z"
  },
  "ceiling-lamp": {
    "keywords": [],
    "path": "M11 2v5.674a3 3 0 0 0-.5.228 3 3 0 0 0-1.49 2.424 10 7 0 0 0-2.01.611A10 7 0 0 0 2 17h20a10 7 0 0 0-5-6.063 10 7 0 0 0-2.008-.609A3 3 0 0 0 13.5 7.902a3 3 0 0 0-.5-.226V2h-2zM9 19a3 3 0 0 0 1.5 2.598 3 3 0 0 0 3 0A3 3 0 0 0 15 19H9z"
  },
  "ceiling-lamp-plafond": {
    "keywords": [],
    "path": "M7.6 4.826v1.748h3.526v2.962c-.914-.874-2.067-1.506-3.43-1.506-1.56 0-3.113 1.026-4.13 2.35a3.85 3.85 0 0 1 1.736.322c.65-.61 1.51-1.022 2.395-1.022 1.757 0 3.192 1.308 3.429 3 .286-.069.58-.104.874-.106.295.002.588.037.874.106.237-1.692 1.672-3 3.43-3 .884 0 1.747.413 2.397 1.025a3.85 3.85 0 0 1 1.55-.33c.062 0 .125.004.188.008-1.017-1.327-2.573-2.353-4.136-2.353-1.362 0-2.515.634-3.428 1.509V6.574H16.4V4.826zm-3.85 6.648a2.75 2.75 0 1 0 0 5.5 2.75 2.75 0 0 0 0-5.5zm16.5 0a2.75 2.75 0 1 0 0 5.5 2.75 2.75 0 0 0 0-5.5zm-8.25 2.2a2.75 2.75 0 1 0 0 5.5 2.75 2.75 0 0 0 0-5.5z"
  },
  "ceiling-lamp-round": {
    "keywords": [],
    "path": "M9 2.5v1a3 1.5 0 0 0 1.5 1.299 3 1.5 0 0 0 .5.113v3.824a11 7.15 0 0 1 1-.037 11 7.15 0 0 1 1 .033v-3.82a3 1.5 0 0 0 .5-.113A3 1.5 0 0 0 15 3.5v-1H9zm3 7.2a10 6.15 0 0 0-10 6.15A10 6.15 0 0 0 12 22a10 6.15 0 0 0 10-6.15A10 6.15 0 0 0 12 9.7z"
  },
  "ceiling-spot-lamp": {
    "keywords": [],
    "path": "M8.5 5v2H11v1H3v2h18V8h-8V7h2.5V5zm-2.394 6.666c-.578.016-1.201.297-1.74.918l-2.694 3.064 4.85 2.801 1.308-3.865c.591-1.71-.454-2.954-1.725-2.918zm11.788 0c-1.27-.036-2.315 1.207-1.724 2.918l1.309 3.865 4.85-2.8-2.694-3.065c-.54-.622-1.163-.902-1.74-.918zM12 12.061c-.875 0-1.75.647-2 1.939l-.8 4h5.6l-.8-4c-.25-1.292-1.125-1.94-2-1.94z"
  },
  "chandelier": {
    "keywords": [],
    "path": "M9 2v1c0 .536.572 1.031 1.5 1.3.235.067.487.118.75.152l-.002 5.634c.246-.056.5-.084.752-.086a3.5 3.5 0 0 1 .75.084V4.452c.263-.034.515-.085.75-.153C14.428 4.031 15 3.536 15 3V2H9zm3 9a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm-7.5 2a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm15 0a2.5 2.5 0 1 0 0 5 2.5 2.5 0 0 0 0-5zm-8.295 3.904a3.152 3.152 0 0 1-3.117 2.727c-.804 0-1.589-.375-2.18-.932A3.5 3.5 0 0 1 4.5 19a3.521 3.521 0 0 1-.172-.008c.925 1.206 2.34 2.139 3.76 2.139 1.26 0 2.325-.592 3.162-1.408v1.527c0 .414.336.75.75.75.4 0 .728-.351.748-.75v-1.527c.837.817 1.904 1.408 3.164 1.408 1.42 0 2.831-.932 3.756-2.137a3.5 3.5 0 0 1-1.578-.293c-.59.556-1.374.93-2.178.93a3.152 3.152 0 0 1-3.117-2.727c-.26.063-.527.095-.795.096a3.5 3.5 0 0 1-.795-.096z"
  },
  "dome-light": {
    "keywords": [],
    "path": "M4 6.9c0 2.86 1.5 5.5 4 6.93 2.5 1.43 5.5 1.43 8 0s4-4.07 4-6.93zm1.27 6.52L3.5 15.19l1.41 1.41 1.77-1.77zm13.46 0-1.41 1.41 1.77 1.77 1.41-1.41zM11 16.1v3h2v-3z"
  },
  "fan-speed-1": {
    "keywords": [],
    "path": "M13 19a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.5-.6-1.2-.9.2-1.6 1.6-2.4C17.1 5.6 17 2 12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.4 7.6 2.4q.6.6 1.3.9-.3 1.6-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4m-1-6q-1 0-1-1c0-1 .4-1 1-1q.9 0 1 1c.1 1-.5 1-1 1m5 2v2h1v6h2v-8z"
  },
  "fan-speed-2": {
    "keywords": [],
    "path": "M13 19a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.5-.6-1.2-.9.2-1.6 1.6-2.4C17.1 5.6 17 2 12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.4 7.6 2.4q.6.6 1.3.9-.3 1.6-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4m-1-6q-1 0-1-1c0-1 .4-1 1-1q.9 0 1 1c.1 1-.5 1-1 1m4 2v2h3v1h-1a2 2 0 0 0-2 2v3h5v-2h-3v-1h1a2 2 0 0 0 2-2v-1a2 2 0 0 0-2-2z"
  },
  "fan-speed-3": {
    "keywords": [],
    "path": "M13 19a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.5-.6-1.2-.9.2-1.6 1.6-2.4C17.1 5.6 17 2 12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.4 7.6 2.4q.6.6 1.3.9-.3 1.6-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4m-1-6q-1 0-1-1c0-1 .4-1 1-1q.9 0 1 1c.1 1-.5 1-1 1m9 8v-.5q-.1-1.4-1.5-1.5 1.4-.1 1.5-1.5V17a2 2 0 0 0-2-2h-3v2h3v1h-2v2h2v1h-3v2h3a2 2 0 0 0 2-2"
  },
  "fan-speed-4": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m4 4v4.8h3.4V23H21v-8h-1.6v3.2h-1.8V15z"
  },
  "fan-speed-5": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m4 4v4.8h3.4v1.6H16V23h3.4q1.5-.1 1.6-1.6v-1.6q-.1-1.5-1.6-1.6h-1.8v-1.6H21V15z"
  },
  "fan-speed-6": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m5.6 4q-1.5.1-1.6 1.6v4.8q.1 1.5 1.6 1.6h1.8q1.5-.1 1.6-1.6v-1.6q-.1-1.5-1.6-1.6h-1.8v-1.6H21V15zm0 4.8h1.8v1.6h-1.8z"
  },
  "fan-speed-7": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m4 4v1.6h3.4L16 23h1.6l3.4-6.4V15z"
  },
  "fan-speed-8": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m5.6 4q-1.5.1-1.6 1.6v1.2q0 1.1 1.2 1.2-1.1 0-1.2 1.2v1.2q.1 1.5 1.6 1.6h1.8q1.5-.1 1.6-1.6v-1.2q0-1.1-1.2-1.2 1.1 0 1.2-1.2v-1.2q-.1-1.5-1.6-1.6zm0 1.6h1.8v1.6h-1.8zm0 3.2h1.8v1.6h-1.8z"
  },
  "fan-speed-9": {
    "keywords": [],
    "path": "M12.5 2c-3.6 0-4.4 4-2.4 7.7l-.9 1.2q-1.6-.3-2.5-1.6C5.6 6.9 2 7 2 11.5c0 3.6 4 4.3 7.6 2.4q.6.6 1.3.9-.3 1.7-1.6 2.4C6.9 18.4 7 22 11.5 22q1.2 0 2-.6-.5-1-.5-2.4a6 6 0 0 1 1.3-3.7l-.4-1q.6-.4.9-1.2.8.2 1.4.6a6 6 0 0 1 5.7 0l.1-1.2c0-3.6-4-4.4-7.7-2.4q-.4-.6-1.2-.9.2-1.7 1.6-2.4C17.1 5.6 17 2 12.5 2m-.5 9q.9.1 1 1-.1.9-1 1a1 1 0 0 1-1-1q0-.9 1-1m5.6 4q-1.5.1-1.6 1.6v1.6q.1 1.5 1.6 1.6h1.8v1.6H16V23h3.4q1.5-.1 1.6-1.6v-4.8q-.1-1.5-1.6-1.6zm0 1.6h1.8v1.6h-1.8z"
  },
  "floor-lamp": {
    "keywords": [],
    "path": "M7.5 2 10 9h4l2.5-7h-9zm3.79 8L6.92 22h1.064l3.516-9.656V22h1v-9.65L16.012 22h1.064L12.71 10h-1.42z"
  },
  "floor-lamp-dual": {
    "keywords": [],
    "path": "M8.928 1.984 2 5.982v.002l5.666 4.81 2.598-1.5-1.336-7.31zm6.187 0L13.78 9.297l2.6 1.5 5.664-4.813v-.002l-6.928-3.998zm-4.535 8.862-1.732 1L11 15.572V20H8v2h8v-2h-3v-4.352l2.195-3.802-1.732-1-1.442 2.496-1.441-2.496z"
  },
  "homeassistant": {
    "keywords": [],
    "path": "M12 2a2 2 0 0 0-1.4.6l-7.9 7.8c-.4.5-.7 1.1-.7 1.8V20c0 1.1.9 2 2 2h7l-3-2.9a1.8 1.8 0 1 1 1.1-1l2.2 2v-9.6a1.8 1.8 0 0 1-1-1.6A1.8 1.8 0 0 1 12 7.2a1.8 1.8 0 0 1 1.8 1.7 1.8 1.8 0 0 1-1 1.6v5.6l2-2a1.7 1.7 0 1 1 1.1 1l-3.2 3.2V22H20a2 2 0 0 0 2-2v-7.8c0-.7-.3-1.3-.7-1.8l-7.9-7.8A2 2 0 0 0 12 2z"
  },
  "led-strip": {
    "keywords": [],
    "path": "M2.164 2 1 6.346l19.801 5.306.648-2.414a1.995 1.995 0 0 0-1.414-2.449l-17.87-4.79zM4.07 3.572a1.25 1.25 0 0 1 1.135 1.572A1.25 1.25 0 1 1 4.07 3.573zm3.623.971a1.25 1.25 0 1 1-.148 2.496 1.25 1.25 0 0 1 .148-2.496zm3.864 1.035a1.25 1.25 0 0 1 1.135 1.572 1.25 1.25 0 1 1-1.135-1.572zm3.623.97a1.25 1.25 0 1 1-.148 2.496 1.25 1.25 0 0 1 .148-2.495zm3.62.972a1.25 1.25 0 0 1 1.135 1.572 1.25 1.25 0 1 1-1.134-1.572zm-7.378 2.619L5.06 11.848l7.516 2.013 6.361-1.709-7.515-2.013zm-8.225 2.209-.646 2.414a1.995 1.995 0 0 0 1.414 2.449l17.87 4.79L23 17.653 3.197 12.348zm2.149 1.636a1.25 1.25 0 0 1 1.135 1.572 1.25 1.25 0 1 1-1.135-1.572zm3.623.971a1.25 1.25 0 1 1-.148 2.496 1.25 1.25 0 0 1 .148-2.496zm3.62.97a1.25 1.25 0 0 1 1.135 1.572 1.25 1.25 0 1 1-1.134-1.571zm3.864 1.036a1.25 1.25 0 0 1 1.135 1.572 1.25 1.25 0 1 1-1.135-1.572zm3.623.97a1.25 1.25 0 1 1-.148 2.496 1.25 1.25 0 0 1 .148-2.495z"
  },
  "light-string": {
    "keywords": [],
    "path": "M2 5.847v.8c.758.383 1.51.786 2.297 1.104l-.518 1.932 2.319.62.508-1.896c1.177.275 2.545.5 4.195.57v1.975h2.398V8.978a22.431 22.431 0 0 0 4.196-.57l.507 1.896 2.319-.621-.518-1.932c.718-.275 1.562-.699 2.297-1.104v-.7s-.89.494-2.498 1.109C17.893 7.67 15.426 8.29 12 8.29c-3.425 0-5.893-.62-7.502-1.234C2.89 6.44 2 5.846 2 5.846zm18.533 4.594a.398.398 0 0 0-.105.013l-2.319.623a.4.4 0 0 0-.283.489l.234.873a2.801 2.801 0 0 0-.566 2.529 2.8 2.8 0 1 0 3.656-3.357l-.234-.874a.4.4 0 0 0-.383-.296zm-17.08.002a.4.4 0 0 0-.371.295l-.233.873a2.8 2.8 0 0 0 .227 5.337 2.8 2.8 0 0 0 2.863-4.51l.235-.872a.4.4 0 0 0-.283-.489l-2.319-.623a.399.399 0 0 0-.119-.011zm7.348 1.31a.4.4 0 0 0-.4.4v.905A2.798 2.798 0 0 0 12 18.153a2.798 2.798 0 0 0 1.6-5.096v-.904a.4.4 0 0 0-.4-.4z"
  },
  "lightbulb-top": {
    "keywords": [],
    "path": "M12 22a7 7 0 0 1-7-7c0-2.38 1.19-4.47 3-5.74V7a1 1 0 0 1 1-1h6a1 1 0 0 1 1 1v2.26c1.81 1.27 3 3.36 3 5.74a7 7 0 0 1-7 7M9 3a1 1 0 0 1 1-1h4a1 1 0 0 1 1 1v1H9z"
  },
  "lightbulb-top-outline": {
    "keywords": [],
    "path": "M12 22a7 7 0 0 0 7-7c0-2.38-1.19-4.47-3-5.74V7a1 1 0 0 0-1-1H9a1 1 0 0 0-1 1v2.26C6.19 10.53 5 12.62 5 15a7 7 0 0 0 7 7M9 3v1h6V3a1 1 0 0 0-1-1h-4a1 1 0 0 0-1 1m3 17a5 5 0 0 1-5-5c0-2.05 1.23-3.81 3-4.58V8h4v2.42c1.77.77 3 2.53 3 4.58a5 5 0 0 1-5 5z"
  },
  "matter": {
    "keywords": [],
    "path": "m12 1.2-1.236.712v6.21a6.998 6.998 0 0 1-3.225-1.493L5.11 8.03a9.683 9.683 0 0 0 13.782 0L16.46 6.63a6.999 6.999 0 0 1-3.225 1.492V1.912L12 1.2zm-8.527 9.667v2.807a7 7 0 0 1 2.906 2.045L1 18.824v1.426l1.236.715 5.377-3.106a7 7 0 0 1 .32 3.54l2.428 1.402a9.68 9.68 0 0 0-6.888-11.934zm17.055.002a9.676 9.676 0 0 0-6.889 11.932l2.428-1.403a7 7 0 0 1 .32-3.539l5.377 3.106L23 20.25v-1.426l-5.379-3.105a7 7 0 0 1 2.907-2.045v-2.805z"
  },
  "mirror-lamp": {
    "keywords": [],
    "path": "M4 4c-1.108 0-2 .892-2 2v12c0 1.108.892 2 2 2h16c1.108 0 2-.892 2-2V6c0-1.108-.892-2-2-2zm0 2h2v12H4zm14 0h2v12h-2z"
  },
  "nas": {
    "keywords": [],
    "path": "M4 2c-1.108 0-2 .892-2 2v14c0 1.108.892 2 2 2v2h2v-2h12v2h2v-2c1.108 0 2-.892 2-2V4c0-1.108-.892-2-2-2zm0 2h10v14H4zm11 0h5v14h-5zm1.95 1.25a.75.75 0 1 0 0 1.5h1a.75.75 0 1 0 0-1.5zm0 3a.75.75 0 1 0 0 1.5h1a.75.75 0 1 0 0-1.5z"
  },
  "nginx-proxy-manager": {
    "keywords": [],
    "path": "m12 1-1.695.978v.566C4.43 3.524.61 9.269 1.977 15.066l.928-.536c-1.02-5.075 2.31-10.004 7.4-10.95v.354l1.695.98 1.695-.978V1.978zm2.955 1.837v1.071c4.904 1.648 7.513 6.99 5.797 11.87l-.323-.187-1.695.978v1.957l1.695.978 1.695-.978V16.57l-.473-.273c2.078-5.579-.993-11.752-6.696-13.46zM12 6.079 6.264 9.39v6.623L12 19.325l5.736-3.311V9.39zm0 3.286 2.89 1.668v3.337L12 16.038 9.11 14.37v-3.337zm-8.412 6.226-1.695.978v1.957l1.695.978.457-.264c3.791 4.613 10.699 5.045 15.035.94l-.927-.535c-3.886 3.443-9.84 3.027-13.21-.923l.34-.196V16.57z"
  },
  "night-light": {
    "keywords": [],
    "path": "M12 2A10 10 0 0 0 2 12a10 10 0 0 0 2.947 7.053L2 22h20l-2.947-2.947A10 10 0 0 0 22 12 10 10 0 0 0 12 2zm0 1.5a8.5 8.5 0 0 1 8.5 8.5 8.5 8.5 0 0 1-8.5 8.5A8.5 8.5 0 0 1 3.5 12 8.5 8.5 0 0 1 12 3.5zM9.533 6.533A6 6 0 0 0 6 12a6 6 0 0 0 6 6 6 6 0 0 0 5.467-3.533A6 6 0 0 1 15 15a6 6 0 0 1-6-6 6 6 0 0 1 .533-2.467z"
  },
  "node-red": {
    "keywords": [],
    "path": "M5.42 11.292a1.784 1.784 0 0 0-1.8-1.796H1v1.228h2.62c.338 0 .621.245.621.583v1.78a.64.64 0 0 1-.621.633H1v1.179h2.62a1.8 1.8 0 0 0 1.8-1.811v-.831c4.14.059 5.345 1.136 6.662 2.288 1.269 1.11 2.692 2.302 6.4 2.332v.408c0 1.001.82 1.838 1.821 1.838H23v-1.277h-2.697c-.338 0-.593-.223-.593-.561v-1.78a.59.59 0 0 1 .593-.605H23v-1.179h-2.697c-1.001 0-1.82.783-1.821 1.784v.422c-3.504-.012-4.5-.983-5.774-2.098-1.087-.951-2.365-1.996-5.181-2.377l.071-.063c.542-.497.834-1.098 1.12-1.616s.555-.951.996-1.254c.358-.245.866-.428 1.647-.462v.416c0 1.001.807 1.86 1.808 1.86h7.235c1.001 0 1.81-.859 1.81-1.86V6.69a1.81 1.81 0 0 0-1.81-1.811H13.17c-1.001 0-1.808.81-1.808 1.811v.413c-.943.038-1.658.267-2.185.629-.64.439-.993 1.039-1.291 1.579s-.55 1.024-.931 1.374c-.332.304-.79.539-1.535.626zm7.75-5.185h7.235a.56.56 0 0 1 .582.583v1.78a.56.56 0 0 1-.582.583H13.17c-.338 0-.629-.245-.629-.583V6.69c0-.338.291-.583.629-.583z"
  },
  "open-wrt": {
    "keywords": [],
    "path": "M6.49 9.967a6.784 6.784 0 0 0-1.31 4.013c0 3.76 3.06 6.82 6.82 6.82 3.76 0 6.82-3.06 6.82-6.82a6.78 6.78 0 0 0-1.31-4.013l1.568-1.569a8.972 8.972 0 0 1 1.942 5.582c0 4.973-4.046 9.02-9.02 9.02-4.973 0-9.02-4.047-9.02-9.02 0-2.106.728-4.045 1.942-5.582zm9.086.437-1.555 1.555A2.85 2.85 0 0 0 12 11.12a2.85 2.85 0 0 0-2.021.839l-1.555-1.555A5.045 5.045 0 0 1 12 8.92c1.395 0 2.66.568 3.576 1.484m2.799-2.799L16.82 9.16a6.799 6.799 0 0 0-4.82-2c-1.88 0-3.585.765-4.82 2L5.625 7.605A8.993 8.993 0 0 1 12 4.96a8.991 8.991 0 0 1 6.375 2.645m2.8-2.799-1.556 1.555A10.744 10.744 0 0 0 12 3.201a10.746 10.746 0 0 0-7.619 3.16L2.826 4.806A12.941 12.941 0 0 1 12 1c3.578 0 6.823 1.456 9.174 3.806M12 12.484c.825 0 1.496.671 1.496 1.496s-.671 1.496-1.496 1.496a1.498 1.498 0 0 1-1.496-1.496c0-.825.671-1.496 1.496-1.496"
  },
  "outdoor-lamp": {
    "keywords": [],
    "path": "M12.5 2 12 4l-2 2.305L5 9h2l2.5 9 2.5 2 .5 2h1l.5-2 2.5-2L19 9h2l-5-2.695L14 4l-.5-2zM9 9h8l-2.223 8h-3.554zm-6 5v8h8.5l-.5-2H8l-3-3v-3z"
  },
  "outdoor-lamp-solo": {
    "keywords": [],
    "path": "m11.45 1-.55 2.2-2.2 2.535L3.2 8.7h2.2l2.75 9.9 2.75 2.2.55 2.2h1.1l.55-2.2 2.75-2.2 2.75-9.9h2.2l-5.5-2.965L13.1 3.2 12.55 1zM7.6 8.7h8.8l-2.445 8.8h-3.91z"
  },
  "outdoor-lamp-variant": {
    "keywords": [],
    "path": "M3 3.5V12h2V8.73c.52-.15 1.11-.34 1.426-.515.67-.368 1.035-.841 1.357-1.48.108-.215.168-.372.28-.725.28-.889.51-1.407.996-1.719.389-.25.658-.365 1.289-.365.485 0 .695.106 1.076.332.781.463 1.18 1.283 1.275 2.24.02.787 0 2.171 0 3.002L6.301 14H21l-6.43-4.5c.006-.836.03-2.573 0-3.354-.05-.353-.15-.603-.25-.908-.531-1.621-1.673-2.84-3.271-3.156-.336-.066-.236-.074-.71-.074-.508.001-.49.016-.906.1-1.624.327-2.52 1.422-3.109 3.308-.11.354-.149.438-.27.615-.097.141-.198.25-.322.344A3.174 3.174 0 0 1 5 6.793V3.5zM10.65 15c0 1.707-.005 3.417.014 5.123.103.927 1.062 1.657 2.428 1.85a5.59 5.59 0 0 0 1.119 0c1.086-.155 1.929-.652 2.271-1.334.079-.158.134-.34.157-.532.027-1.7.011-3.405.011-5.107z"
  },
  "path-light": {
    "keywords": [],
    "path": "M12 2 4 8h16zm-1 8v11l1 1 1-1V10z"
  },
  "phoscon": {
    "keywords": [],
    "path": "M5.485 18.534c-.055 2.44.055 3.11-.35 3.581-.763.934-2.295.876-2.958-.141-.321-.492-.288-1.011-.289-1.57v-9.927c.001-.639-.032-1.171.381-1.712.797-1.045 2.434-.898 3.059.135.25.42.169.75.203 1.721.009.681.194 1.711.419 2.302 1.213 3.187 4.8 4.922 8.024 3.784 2.057-.928 3.698-2.548 4.106-4.647.672-3.665-2.224-7.295-5.977-7.338-1.201-.013-2.253.174-3.309.786-.724.42-1.581 1.292-2.302 1.434-1.358.269-2.368-.919-2.109-2.22.17-.85 1.004-1.478 1.678-1.951C7.779 1.564 10.29.85 12.391.994c5.557.38 9.561 4.621 9.496 10.202-.06 5.106-4.372 9.487-9.496 9.496-3.029.005-4.393-.394-6.906-2.158z"
  },
  "plex": {
    "keywords": [],
    "path": "m12.15 22h-7l6.7-10-6.7-10h7l6.7 10z"
  },
  "qbittorrent": {
    "keywords": [],
    "path": "M13.377 2v15.195h1.162l.342-1.377h.117c.39.534.873.931 1.445 1.191.58.254 1.218.381 1.914.381 1.394 0 2.481-.485 3.262-1.455.788-.976 1.182-2.344 1.182-4.101 0-1.758-.39-3.116-1.172-4.073-.775-.963-1.865-1.445-3.272-1.445-1.484 0-2.604.534-3.359 1.602h-.078c.052-.658.078-1.4.078-2.227V2h-1.621zM5.633 6.297c-1.393 0-2.48.491-3.262 1.475-.781.983-1.172 2.35-1.172 4.101 0 1.738.388 3.093 1.162 4.063.775.97 1.853 1.455 3.233 1.455 1.504 0 2.63-.544 3.379-1.631H9.1c-.072.455-.108 1.009-.108 1.66V22h1.621V6.492H9.334L9.1 7.957h-.088c-.788-1.107-1.914-1.66-3.38-1.66zm.185 1.357c1.1 0 1.905.33 2.413.987.507.657.761 1.735.761 3.232v.361c-.032 1.374-.296 2.35-.79 2.93-.496.58-1.283.87-2.364.87-.977 0-1.716-.352-2.217-1.055-.495-.71-.742-1.739-.742-3.086 0-1.348.25-2.39.752-3.125.508-.743 1.237-1.114 2.187-1.114zm12.305.02c1.023 0 1.778.342 2.266 1.025.488.684.732 1.722.732 3.115 0 1.361-.244 2.406-.732 3.135-.488.723-1.23 1.084-2.227 1.084-1.106 0-1.91-.322-2.412-.967-.5-.65-.752-1.728-.752-3.232 0-1.504.245-2.572.733-3.203.488-.638 1.286-.957 2.392-.957z"
  },
  "radarr": {
    "keywords": [],
    "path": "M6.463 2C4.72 2.011 3.033 3.246 3 5.885v12.109c-.016 1.227.963 1.851 2.195 1.717V5.254c.01-.73 1.004-1.404 1.668-1.01l12.205 7.027c.917.623 1.371 1.239 1.508 2.318a3.444 3.444 0 0 0-1.018-4.457L8.726 2.735S7.616 1.99 6.463 2zm.732 4.727V17.37l9.217-5.32zm11.812 6.132-12.693 7.3a3.105 3.105 0 0 1-2.619.273c.753 1.231 2.74 2.028 4.287 1.275l10.686-6.092c.927-.6 1.095-1.674.34-2.756z"
  },
  "roborock": {
    "keywords": [],
    "path": "M12 2C7.342 2 3.44 5.19 2.328 9.5H9.06A3.01 3.01 0 0 1 12 7.1a3.01 3.01 0 0 1 2.94 2.4h6.732C20.56 5.19 16.658 2 12 2zm0 6.1c-1.11 0-2 .89-2 2 0 1.11.89 2 2 2 1.11 0 2-.89 2-2 0-1.11-.89-2-2-2zm-9.875 2.4C2.051 10.99 2 11.489 2 12c.003.584.057 1.166.162 1.74l2.535-.451c.465 2.165 1.752 4.026 3.553 5.139a7.096 7.096 0 0 0 7.5 0c1.802-1.113 3.089-2.976 3.553-5.14l2.543.452A10 10 0 0 0 22 12c0-.511-.05-1.01-.125-1.5h-6.916c-.199 1.462-1.445 2.6-2.959 2.6s-2.76-1.138-2.959-2.6H2.125zm17.846 4.43a8.5 8.5 0 0 1-7.97 5.57 8.5 8.5 0 0 1-7.971-5.568l-1.495.267A10 10 0 0 0 12 22a10 10 0 0 0 9.463-6.803l-1.492-.267z"
  },
  "smoke-detector": {
    "keywords": [],
    "path": "M2 2v4.324a2.16 2.16 0 0 0 1.75 2.123C4.03 10.386 4.79 13 6.846 13h10.309c2.054 0 2.816-2.613 3.095-4.553A2.16 2.16 0 0 0 22 6.324V2H2zm3.25 6.5H7l.6 3h-.754c-.983 0-1.335-1.406-1.596-3zm3.25 0h2.75v3H9.1l-.6-3zm4.25 0h2.75l-.6 3h-2.15v-3zm4.25 0h1.75c-.261 1.594-.62 2.855-1.594 3h-.754l.598-3zm-6.941 5.977-1.506.877s-.33.187-.602.54c-.271.354-.497.969-.24 1.622.276.7.59 1.114.594 1.332.002.127-.031.277-.332.584l-1.807 1.843 2.363-1.035c.07-.03.088-.082.153-.115l.004.008c.005-.005.002-.01.007-.016.387-.198.728-.415.922-.697.229-.332.3-.717.27-1.05-.06-.67-.434-1.188-.621-1.497-.243-.4-.016-.853-.016-.853l.81-1.543zm3.908 0-1.504.877s-.375.215-.684.617c-.308.402-.565 1.086-.273 1.826.253.642.58 1.093.672 1.396.046.152.052.251.011.387s-.146.324-.394.576L9.988 22l2.366-1.035c.07-.03.087-.08.152-.113l.004.006c.006-.007.007-.013.013-.02.46-.232.852-.487 1.075-.81.257-.375.336-.804.302-1.182-.067-.757-.499-1.36-.722-1.729-.314-.518-.02-1.1-.02-1.1l.809-1.54zm3.867.002-1.502.875s-.33.187-.602.54c-.271.354-.499.969-.242 1.622.22.554.495.94.567 1.175.035.119.04.184.01.284-.03.1-.111.249-.315.457l-1.807 1.844 2.366-1.036c.069-.03.086-.082.15-.115l.006.008c.007-.007.007-.015.013-.022.383-.197.722-.41.915-.691.228-.332.3-.717.271-1.05-.06-.669-.436-1.188-.623-1.497-.242-.4-.016-.855-.016-.855l.809-1.54z"
  },
  "sonarr": {
    "keywords": [],
    "path": "M12 1a11 11 0 0 0-6.7 2.3l1.3 1.3c3 3 7.8 3 10.8 0l1.3-1.3A11 11 0 0 0 12 1zm7.6 3L17 6.8l-.2-.2-1.9 1.8.8.8 1.8-1.9-.2-.2L20 4.4a11 11 0 0 0-.4-.3zM4.4 4l-.3.4L6.7 7l-.2.2 1.8 1.9.8-.8-1.9-1.8-.2.2L4.4 4zm16.3 1.3-1.3 1.3c-3 3-3 7.8 0 10.8l1.3 1.3a11 11 0 0 0 0-13.4zm-17.4 0a11 11 0 0 0 0 13.4l1.3-1.3c3-3 3-7.8 0-10.8L3.3 5.3zM12 8.8A3.2 3.2 0 0 0 8.8 12a3.2 3.2 0 0 0 3.2 3.2 3.2 3.2 0 0 0 3.2-3.2A3.2 3.2 0 0 0 12 8.8zm3.6 6.1-.7.8 1.9 1.8.2-.2 2.6 2.6.3-.3-2.6-2.6.2-.2-1.9-1.9zm-7.3 0-1.8 1.9.2.2L4 19.6l.3.3L7 17.3l.2.2 1.9-1.8-.8-.8zm3.9 2.2a7.6 7.6 0 0 0-5.6 2.3l-1.3 1.3a11 11 0 0 0 13.4 0l-1.3-1.3a7.6 7.6 0 0 0-5.2-2.3z"
  },
  "spot-bulb": {
    "keywords": [],
    "path": "m2 2v2h20v-2h-20zm2 4a8 8 0 0 0 4 6.9277v2.0723c0 1.108 0.892 2 2 2h4c1.108 0 2-0.892 2-2v-2.0723a8 8 0 0 0 4-6.9277h-8-8zm5 13v3h2v-3h-2zm4 0v3h2v-3h-2z"
  },
  "spot-bulb-top": {
    "keywords": [],
    "path": "m2 22v-2h20v2zm2-4a8 8 0 0 1 4-6.9277v-2.0723c0-1.108 0.892-2 2-2h4c1.108 0 2 0.892 2 2v2.0723a8 8 0 0 1 4 6.9277h-8zm5-13v-3h2v3zm4 0v-3h2v3z"
  },
  "stairs": {
    "keywords": [],
    "path": "M22 2 2 14v1.5l1.5-.9V17H5v-3.3l14-8.4V8h1.5V4.4l1.5-.9V2zm-5 8v3h-5v3H7v3H2v3h5l15-9v-3h-5z"
  },
  "table-lamp-variant": {
    "keywords": [],
    "path": "M10 2 7.5 9h9L14 2zm1.29 8L6.92 22h1.064l3.516-9.656V22h1v-9.65L16.012 22h1.064L12.71 10h-1.42z"
  },
  "tautulli": {
    "keywords": [],
    "path": "m19.705 2c-1.2674 0-2.2949 1.024-2.2949 2.2871 0 0.622 0.24997 1.1853 0.6543 1.5977l-5.0859 7.1621c-0.2829-0.12414-0.59488-0.19531-0.92383-0.19531-1.2674 0-2.2949 1.024-2.2949 2.2871 0 0.22486 0.032991 0.44319 0.09375 0.64844l-3.8652 2.3828c-0.41956-0.45726-1.0225-0.74414-1.6934-0.74414-1.2674 0-2.2949 1.0242-2.2949 2.2871 0 1.2629 1.0275 2.2871 2.2949 2.2871 1.2675 0 2.2949-1.0242 2.2949-2.2871 0-0.21844-0.030526-0.42895-0.087891-0.62891l3.8711-2.3887c0.41913 0.44963 1.0173 0.73047 1.6816 0.73047 1.2675 0 2.2949-1.0242 2.2949-2.2871 0-0.55729-0.20086-1.0681-0.5332-1.4648l5.1328-7.2266c0.23677 0.08224 0.49124 0.12695 0.75586 0.12695 1.2675 0 2.2949-1.0241 2.2949-2.2871-8.7e-5 -1.2631-1.0275-2.2871-2.2949-2.2871zm-15.41 5.4473c-1.2674 0-2.2949 1.0241-2.2949 2.2871 0 1.263 1.0275 2.2871 2.2949 2.2871 0.39032 0 0.75844-0.098281 1.0801-0.26953l3.2188 3.6367 0.18555-0.11523c-0.001974-0.046296-0.019531-0.088056-0.019531-0.13477 0-0.3385 0.051465-0.66649 0.14844-0.97461l-2.7461-3.1016c0.26906-0.37468 0.42773-0.83243 0.42773-1.3281 0-1.2631-1.0274-2.2871-2.2949-2.2871zm15.41 9.9785c-0.91242 0-1.7004 0.53031-2.0703 1.2988l-3.2871-0.47461c-0.002145-0.23215-0.038844-0.4553-0.10547-0.66602-0.58412 0.52121-1.3505 0.8418-2.1875 0.8418-0.63393 0-1.1953-0.22964-1.7012-0.54297l-0.5918 0.36524c-8.2e-5 0.007962-0.0019532 0.015456-0.0019532 0.023437 0 1.2631 1.0274 2.2871 2.2949 2.2871 0.9072 0 1.6901-0.52561 2.0625-1.2871l3.293 0.47656c0.01915 1.2465 1.0393 2.252 2.2949 2.252 1.2674 0 2.2949-1.0242 2.2949-2.2871 0-1.2629-1.0275-2.2871-2.2949-2.2871z"
  },
  "thermostat": {
    "keywords": [],
    "path": "M12 2C6.489 2 2 6.489 2 12s4.489 10 10 10 10-4.489 10-10S17.511 2 12 2zm0 2c4.43 0 8 3.57 8 8s-3.57 8-8 8-8-3.57-8-8 3.57-8 8-8zm3.5 1.938L9.402 10.5a3 3 0 0 0 0 3A3 3 0 0 0 12 15a3 3 0 0 0 2.598-1.5l.902-7.563z"
  },
  "transmission": {
    "keywords": [],
    "path": "M10.764 1a.793.793 0 0 0-.713.455H6.728c-.721 0-1.373.112-1.867.308a1.925 1.925 0 0 0-.616.365c-.16.15-.275.347-.275.57v1.046c0 .222.115.42.275.57.16.15.37.267.616.365.494.195 1.146.307 1.867.307h3.248v2.51H4.96c-.74-.028-1.426.573-1.494 1.339-.442 3.632-1.1 7.284-1.437 10.939l-.001.01v1.549c.019.897.62 1.54 1.316 1.663l.022.004H20.71c.3-.007.61-.112.855-.322.244-.21.415-.54.405-.935v-1.981L20.404 9.127v-.006c-.148-.753-.77-1.53-1.674-1.623l-.013-.001h-4.693v-2.51h3.248c.72 0 1.373-.113 1.867-.308a1.92 1.92 0 0 0 .615-.366c.16-.15.276-.347.276-.57V2.699c0-.222-.116-.42-.276-.57a1.92 1.92 0 0 0-.615-.365c-.494-.196-1.146-.308-1.867-.308h-3.323A.793.793 0 0 0 13.235 1zm.305.498h1.861c.326 0 .594.33.594.73v11.029c0 .4-.268.73-.594.73H11.07c-.326 0-.594-.33-.594-.73V2.229c0-.4.268-.73.594-.73zM6.292 8.944h3.684v.689l-.996 5.803H6.854l4.862 3.122 5.43-3.122h-2.208l-.915-5.867v-.625h3.226c.663-.02 1.29.398 1.475.983l.006.02 1.213 8.1v.014c.016.404-.055.747-.234 1.005a.937.937 0 0 1-.807.398l-13.65.05H5.24l-.014-.001c-.33-.036-.635-.166-.85-.404-.217-.237-.332-.572-.324-.962v-.011l.954-8.03.005-.018c.082-.3.22-.578.434-.791.213-.213.509-.354.848-.353z"
  },
  "xmas-candle-bridge": {
    "keywords": [],
    "path": "M12 2a.748.748 0 0 0-.75.75v7L12 9l.75.75v-7A.748.748 0 0 0 12 2zM9 5a.748.748 0 0 0-.75.75v6.998l1.5-1.5V5.75A.748.748 0 0 0 9 5zm6 0a.748.748 0 0 0-.75.75v5.5l1.5 1.5v-7A.748.748 0 0 0 15 5zM6 8a.748.748 0 0 0-.75.75v7l1.5-1.5v-5.5A.748.748 0 0 0 6 8zm12 0a.748.748 0 0 0-.75.75v5.756l1.5 1.5V8.75A.748.748 0 0 0 18 8zM3 11a.748.748 0 0 0-.75.75v7l1.5-1.5v-5.5A.748.748 0 0 0 3 11zm9 0-2.121 2.121L1 22h4.244L12 15.242 18.756 22H23l-8.879-8.879L12 11zm9 0a.748.748 0 0 0-.75.75v5.5l1.5 1.5v-7A.748.748 0 0 0 21 11z"
  },
  "xmas-star": {
    "keywords": [],
    "path": "m12 22-1.643-7.109-6.583 3.148 4.533-5.717-6.564-3.184 7.296-.02L7.435 2 12 7.69 16.565 2 14.96 9.118l7.296.02-6.565 3.184 4.533 5.717-6.582-3.147z"
  },
  "cpu": {
    "keywords": [],
    "path": "m8.701 1a1.1 1.1 0 0 0-1.101 1.101v1.099h-1.099c-1.8095 0-3.301 1.4915-3.301 3.301v1.099h-1.099a1.1 1.1 0 0 0-1.101 1.101 1.1 1.1 0 0 0 1.101 1.099h1.099v4.4h-1.099a1.1 1.1 0 0 0-1.101 1.099 1.1 1.1 0 0 0 1.101 1.101h1.099v1.099c-2e-7 1.8095 1.4915 3.301 3.301 3.301h1.099v1.099a1.1 1.1 0 0 0 1.101 1.101 1.1 1.1 0 0 0 1.099-1.101v-1.099h4.4v1.099a1.1 1.1 0 0 0 1.099 1.101 1.1 1.1 0 0 0 1.101-1.101v-1.099h1.099c1.8095 1e-6 3.301-1.4915 3.301-3.301v-1.099h1.099a1.1 1.1 0 0 0 1.101-1.101 1.1 1.1 0 0 0-1.101-1.099h-1.099v-4.4h1.099a1.1 1.1 0 0 0 1.101-1.099 1.1 1.1 0 0 0-1.101-1.101h-1.099v-1.099c1e-6 -1.8095-1.4915-3.301-3.301-3.301h-1.099v-1.099a1.1 1.1 0 0 0-1.101-1.101 1.1 1.1 0 0 0-1.099 1.101v1.099h-4.4v-1.099a1.1 1.1 0 0 0-1.099-1.101zm-2.2 4.4h10.998c0.62053-1e-7 1.101 0.48048 1.101 1.101v10.998c0 0.62053-0.48048 1.101-1.101 1.101h-10.998c-0.62053 0-1.101-0.48048-1.101-1.101v-10.998c0-0.62053 0.48048-1.101 1.101-1.101zm4.4 3.301c-1.202-3e-7 -2.2 0.99804-2.2 2.2v2.198c-7e-7 1.202 0.99804 2.2 2.2 2.2h2.198c1.202 0 2.2-0.99804 2.2-2.2v-2.198c0-0.89859-0.63381-1.5325-1.4176-1.8713a1.1 1.1 0 0 0-0.7824-0.32869zm0 2.2h2.198v2.198h-2.198z"
  },
  "health": {
    "keywords": [],
    "path": "m11.999 2.3751a1.0313 1.0313 0 0 1 0.98315 0.71639l4.5184 14.12 1.7683-5.5249a1.0313 1.0313 0 0 1 0.98178-0.71777h1.7188a1.0313 1.0313 0 0 1 0 2.0626h-0.96665l-2.5204 7.8776a1.0313 1.0313 0 0 1-1.9636 0l-4.5115-14.098-3.1488 9.969a1.0313 1.0313 0 0 1-1.9526 0.04125l-1.738-4.7796-0.096253 0.28601a1.0313 1.0313 0 0 1-0.97765 0.70539h-2.0626a1.0313 1.0313 0 0 1 0-2.0626h1.32l0.79477-2.3884a1.0313 1.0313 0 0 1 1.9484-0.027501l1.7119 4.7095 3.2107-10.167a1.0313 1.0313 0 0 1 0.98178-0.72189"
  },
  "memory": {
    "keywords": [],
    "path": "m4 4c-1.645 0-3 1.355-3 3v1.0625a1.0001 1.0001 0 0 0 0.7168 0.95898c0.53984 0.15902 0.71875 0.53221 0.71875 0.96094 0 0.42873-0.17891 0.79997-0.71875 0.95898a1.0001 1.0001 0 0 0-0.7168 0.95898v5.0996c0 1.645 1.355 3 3 3h16c1.645 0 3-1.355 3-3v-5.0625a1.0001 1.0001 0 0 0-0.7168-0.95898c-0.53984-0.15902-0.71875-0.53221-0.71875-0.96094 0-0.42873 0.17891-0.79997 0.71875-0.95898a1.0001 1.0001 0 0 0 0.7168-0.95898v-1.0996c0-1.645-1.355-3-3-3zm0 2h16c0.56413 0 1 0.43587 1 1v0.6543c-0.84883 0.57779-1.4355 1.4277-1.4355 2.3633 0 0.93563 0.58672 1.7874 1.4355 2.3652v1.6172h-18v-1.6543c0.84883-0.57779 1.4355-1.4277 1.4355-2.3633 0-0.93563-0.58672-1.7874-1.4355-2.3652v-0.61719c0-0.56413 0.43587-1 1-1zm4 2a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm4 0a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm4 0a1 1 0 0 0-1 1v2a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-2a1 1 0 0 0-1-1zm-13 8h2v2h-1c-0.56413 0-1-0.43587-1-1zm4 0h2v2h-2zm4 0h2v2h-2zm4 0h2v2h-2zm4 0h2v1c0 0.56413-0.43587 1-1 1h-1z"
  },
  "ssd": {
    "keywords": [],
    "path": "m5.562 2.872c0.588-0.457 1.262-0.622 1.938-0.622h9c0.677 0 1.351 0.165 1.938 0.622 0.58 0.451 0.997 1.13 1.277 2.02l8e-3 0.023 2.537 10.3c0.314 0.623 0.49 1.331 0.49 2.08 0 2.42-1.863 4.455-4.25 4.455h-13c-2.387 0-4.25-2.036-4.25-4.456 0-0.748 0.176-1.456 0.49-2.078l2.537-10.3 8e-3 -0.024c0.28-0.89 0.698-1.569 1.277-2.02m-0.9601 9.8725c0.48586-0.22583 1.0151-0.3431 1.5509-0.34364h11.694c0.55414 0 1.0786 0.12324 1.5509 0.34364l-1.7506-7.1066c-0.19791-0.61441-0.44619-0.95085-0.68548-1.138-0.23659-0.18441-0.52895-0.27437-0.91397-0.27437h-8.0962c-0.38502 0-0.67738 0.089957-0.91397 0.27437-0.23929 0.18711-0.48847 0.52355-0.68548 1.1389zm1.4867 1.8612c-0.91582 0-1.7361 0.53294-2.1736 1.3596-0.2166 0.40929-0.32905 0.86564-0.3274 1.3287 0 1.5224 1.1559 2.6883 2.501 2.6883h11.823c1.3451 0 2.501-1.1659 2.501-2.6883 0.0016-0.46307-0.1108-0.91942-0.3274-1.3287-0.43745-0.82669-1.2578-1.3596-2.1736-1.3596zm4.4115 1.6443c0.41421 0 0.75 0.33579 0.75 0.75v1c0 1-1.5 1-1.5 0v-1c0-0.41421 0.33579-0.75 0.75-0.75m2.5 0c0.41421 0 0.75 0.33579 0.75 0.75v1c0 1-1.5 1-1.5 0v-1c0-0.41421 0.33579-0.75 0.75-0.75m2.5 0c0.41421 0 0.75 0.33579 0.75 0.75v1c0 1-1.5 1-1.5 0v-1c0-0.41421 0.33579-0.75 0.75-0.75m2.5 0c0.41421 0 0.75 0.33579 0.75 0.75v1c0 1-1.5 1-1.5 0v-1c0-0.41421 0.33579-0.75 0.75-0.75"
  },
  "temperature": {
    "keywords": [],
    "path": "m7.008 22.187c-4.4273 5e-3 -6.6698-5.3278-3.5695-8.4883v-7.9315c0-4.7594 7.1391-4.7594 7.1391 0v7.9315c3.1003 3.1605 0.85775 8.4933-3.5695 8.4883m0-18.549c-1.1353 0.0011392-2.0554 0.92121-2.0565 2.0565v8.783l-0.22759 0.20497c-2.3467 2.0974-0.86274 5.9829 2.2841 5.9829 3.1469 0 4.6308-3.8855 2.2841-5.9829l-0.22759-0.20497v-8.783c-0.0011337-1.1353-0.92121-2.0554-2.0565-2.0565m0.71391 11.541v-5.8426h-1.4278v5.8426c-2.2717 0.80316-1.6915 4.1601 0.71391 4.1601s2.9856-3.357 0.71391-4.1601m7.1303-11.554c0 0.78373-0.63534 1.4191-1.4191 1.4191s-1.4191-0.63534-1.4191-1.4191c0-0.78373 0.63534-1.4191 1.4191-1.4191s1.4191 0.63534 1.4191 1.4191zm7.1478 9.9947h-4.2834c-0.78856 0-1.4278-0.63925-1.4278-1.4278v-7.1391c0-0.78856 0.63925-1.4278 1.4278-1.4278h4.2834v1.6067h-4.0865v6.6731h4.0865z"
  },
  uptime: {
    "keywords": [],
    "path": "m12 5.75a1.25 1.25 0 0 0-1.25 1.25v5a1.2501 1.2501 0 0 0 0.36523 0.88477l2.5 2.5a1.25 1.25 0 0 0 1.7695 0 1.25 1.25 0 0 0 0-1.7695l-2.1348-2.1328v-4.4824a1.25 1.25 0 0 0-1.25-1.25zm1.373-3.9121c-2.9541-0.41051-6.1441 0.44116-8.6152 2.9082-3.2948 3.2894-3.7215 7.8591-2.1094 11.451 1.6122 3.592 5.3107 6.3111 9.959 6.0352a1.25 1.25 0 0 0 1.1738-1.3223 1.25 1.25 0 0 0-1.3223-1.1738c-3.6197 0.21486-6.2976-1.818-7.5293-4.5625-1.2317-2.7445-0.96989-6.0969 1.5957-8.6582 2.5656-2.5613 5.9178-2.8164 8.6602-1.5801 2.7424 1.2363 4.7697 3.9178 4.5488 7.5371a1.25 1.25 0 0 0 1.1719 1.3223 1.25 1.25 0 0 0 1.3242-1.1699c0.28362-4.6478-2.4282-8.3506-6.0176-9.9688-0.89734-0.40453-1.8551-0.68152-2.8398-0.81836zm5.627 13.162a1 1 0 0 0-1 1v6a1 1 0 0 0 1 1 1 1 0 0 0 1-1v-6a1 1 0 0 0-1-1zm-0.70703 0.29297-3 3a1 1 0 0 0 0 1.4141 1 1 0 0 0 1.4141 0l2.293-2.293 2.293 2.293a1 1 0 0 0 1.4141 0 1 1 0 0 0 0-1.4141l-3-3a1.0001 1.0001 0 0 0-1.4141 0z"
  },
  lab: {
    "keywords": [],
    "path": "m19.861 18.111c-2.4994-6.2419-5.4169-7.887-5.4169-11v-3.6667h0.61111a0.61111 0.61111 0 0 0 0.61111-0.61111v-1.2222a0.61111 0.61111 0 0 0-0.61111-0.61111h-6.1111a0.61111 0.61111 0 0 0-0.61111 0.61111v1.2222a0.61111 0.61111 0 0 0 0.61111 0.61111h0.61111v3.6667c0 3.113-2.9174 4.7581-5.4169 11-0.79567 1.9861-2.8392 4.8889 7.8613 4.8889 10.701 0 8.657-2.9028 7.8613-4.8889m-1.9763 2.1401c-0.858 0.25667-2.5654 0.54878-5.885 0.54878-3.3196 0-5.027-0.29211-5.885-0.54878-0.30433-0.09044-0.42289-0.44367-0.31533-0.76756 0.26889-0.81889 0.77611-2.2342 1.7246-3.8146 2.3173-3.861 4.7214 0.60744 6.7222 0.60744 2.0008 0 1.452-1.9079 2.2293-0.60744a18.822 18.822 0 0 1 1.7246 3.8146c0.10756 0.32389-0.011 0.67589-0.31533 0.76756"
  },
  placeholder: {
    keywords: ["placeholder", "empty", "icon"],
    path: "M10.5 3a.5.5 0 0 0 0 1h3a.5.5 0 0 0 0-1zM7.25 3c-.648 0-1.59 0-2.34.381a3.52 3.52 0 0 0-1.53 1.53c-.382.75-.382 1.69-.381 2.34V7.5a.5.5 0 0 0 1 0v-.2c0-.711.01-1.42.272-1.93a2.5 2.5 0 0 1 1.09-1.09c.515-.262 1.22-.272 1.93-.272h.2a.5.5 0 0 0 0-1h-.249zm9.45 0h-.249a.5.5 0 0 0 0 1h.2c.711 0 1.42.01 1.94.272c.47.24.853.622 1.09 1.09c.262.515.272 1.22.272 1.93v.2a.5.5 0 0 0 1 0v-.249c0-.648 0-1.59-.382-2.34a3.52 3.52 0 0 0-1.53-1.53c-.75-.382-1.69-.382-2.34-.381zM7.25 21c-.648 0-1.59 0-2.34-.382a3.52 3.52 0 0 1-1.53-1.53c-.382-.75-.382-1.69-.381-2.34v-.249a.5.5 0 0 1 1 0v.2c0 .711.01 1.42.272 1.94c.24.47.622.853 1.09 1.09c.515.262 1.22.272 1.93.272h.2a.5.5 0 0 1 0 1h-.249zm2.75-.5a.5.5 0 0 0 .5.5h3a.5.5 0 0 0 0-1h-3a.5.5 0 0 0-.5.5m6.7.5c.648 0 1.59 0 2.34-.382a3.52 3.52 0 0 0 1.53-1.53c.382-.75.382-1.69.382-2.34v-.249a.5.5 0 0 0-1 0v.2c0 .711-.01 1.42-.272 1.94a2.5 2.5 0 0 1-1.09 1.09c-.515.262-1.22.272-1.94.272h-.2a.5.5 0 0 0 0 1zM3.5 10a.5.5 0 0 1 .5.5v3a.5.5 0 0 1-1 0v-3a.5.5 0 0 1 .5-.5m17.5.5a.5.5 0 0 0-1 0v3a.5.5 0 0 0 1 0z"
  },
  back: {
    keywords: ["arrow", "back", "left"],
    path: "M15.41,16.58L10.83,12L15.41,7.41L14,6L8,12L14,18L15.41,16.58Z"
  },
  play: {
    keywords: ["play", "tape", "pause"],
    path: "M 8.779912,4.2126853 C 7.9852701,3.7620011 6.9998542,4.3360939 7,5.249643 v 13.501904 c -1.461e-4,0.91355 0.98527,1.487643 1.779912,1.036959 l 11.916671,-6.752542 c 0.805648,-0.45658 0.805648,-1.617337 0,-2.073917 z M 5,4.9209624 C 5,2.6869116 7.4090417,1.2819845 9.3539409,2.3827607 l 12.4968521,7.077133 c 1.972398,1.1166083 1.973231,3.9581293 8.32e-4,5.0747373 L 9.3547741,21.617596 C 7.409875,22.71754 5,21.313446 5,19.078562 Z"
  }
};
const ICONS_MAP = Object.entries(ICONS).map(([icon, content]) => ({ name: icon, keywords: content.keywords }));
window.customIcons = window.customIcons || {};
window.customIconsets = window.customIconsets || {};
window.customIcons["lc"] = {
  getIcon: async (iconName) => {
    var _a;
    return { path: (_a = ICONS[iconName]) == null ? void 0 : _a.path };
  },
  getIconList: async () => ICONS_MAP
};
const { LitElement, css, html } = function getLit() {
  const keys = Object.keys(customElements);
  for (let i2 = 0; i2 < keys.length; i2++) {
    const entity = customElements[keys[i2]];
    if (entity instanceof Map) {
      for (const entityKey of entity.keys()) {
        if (typeof entityKey === "string") {
          const LitElement2 = Object.getPrototypeOf(customElements.get(entityKey));
          const html2 = LitElement2.prototype.html;
          const css2 = LitElement2.prototype.css;
          if (html2 && css2) {
            return { LitElement: LitElement2, css: css2, html: html2 };
          }
        } else {
          break;
        }
      }
    }
  }
  throw new Error("No lit found");
}();
const t$1 = (t2) => (e2, o2) => {
  void 0 !== o2 ? o2.addInitializer(() => {
    customElements.define(t2, e2);
  }) : customElements.define(t2, e2);
};
const t = globalThis, e$3 = t.ShadowRoot && (void 0 === t.ShadyCSS || t.ShadyCSS.nativeShadow) && "adoptedStyleSheets" in Document.prototype && "replace" in CSSStyleSheet.prototype, s = Symbol(), o$2 = /* @__PURE__ */ new WeakMap();
let n$2 = class n {
  constructor(t2, e2, o2) {
    if (this._$cssResult$ = true, o2 !== s) throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");
    this.cssText = t2, this.t = e2;
  }
  get styleSheet() {
    let t2 = this.o;
    const s2 = this.t;
    if (e$3 && void 0 === t2) {
      const e2 = void 0 !== s2 && 1 === s2.length;
      e2 && (t2 = o$2.get(s2)), void 0 === t2 && ((this.o = t2 = new CSSStyleSheet()).replaceSync(this.cssText), e2 && o$2.set(s2, t2));
    }
    return t2;
  }
  toString() {
    return this.cssText;
  }
};
const r$3 = (t2) => new n$2("string" == typeof t2 ? t2 : t2 + "", void 0, s), S = (s2, o2) => {
  if (e$3) s2.adoptedStyleSheets = o2.map((t2) => t2 instanceof CSSStyleSheet ? t2 : t2.styleSheet);
  else for (const e2 of o2) {
    const o3 = document.createElement("style"), n3 = t.litNonce;
    void 0 !== n3 && o3.setAttribute("nonce", n3), o3.textContent = e2.cssText, s2.appendChild(o3);
  }
}, c$1 = e$3 ? (t2) => t2 : (t2) => t2 instanceof CSSStyleSheet ? ((t3) => {
  let e2 = "";
  for (const s2 of t3.cssRules) e2 += s2.cssText;
  return r$3(e2);
})(t2) : t2;
const { is: i, defineProperty: e$2, getOwnPropertyDescriptor: h, getOwnPropertyNames: r$2, getOwnPropertySymbols: o$1, getPrototypeOf: n$1 } = Object, a = globalThis, c = a.trustedTypes, l = c ? c.emptyScript : "", p = a.reactiveElementPolyfillSupport, d = (t2, s2) => t2, u = { toAttribute(t2, s2) {
  switch (s2) {
    case Boolean:
      t2 = t2 ? l : null;
      break;
    case Object:
    case Array:
      t2 = null == t2 ? t2 : JSON.stringify(t2);
  }
  return t2;
}, fromAttribute(t2, s2) {
  let i2 = t2;
  switch (s2) {
    case Boolean:
      i2 = null !== t2;
      break;
    case Number:
      i2 = null === t2 ? null : Number(t2);
      break;
    case Object:
    case Array:
      try {
        i2 = JSON.parse(t2);
      } catch (t3) {
        i2 = null;
      }
  }
  return i2;
} }, f = (t2, s2) => !i(t2, s2), b = { attribute: true, type: String, converter: u, reflect: false, useDefault: false, hasChanged: f };
Symbol.metadata ?? (Symbol.metadata = Symbol("metadata")), a.litPropertyMetadata ?? (a.litPropertyMetadata = /* @__PURE__ */ new WeakMap());
class y extends HTMLElement {
  static addInitializer(t2) {
    this._$Ei(), (this.l ?? (this.l = [])).push(t2);
  }
  static get observedAttributes() {
    return this.finalize(), this._$Eh && [...this._$Eh.keys()];
  }
  static createProperty(t2, s2 = b) {
    if (s2.state && (s2.attribute = false), this._$Ei(), this.prototype.hasOwnProperty(t2) && ((s2 = Object.create(s2)).wrapped = true), this.elementProperties.set(t2, s2), !s2.noAccessor) {
      const i2 = Symbol(), h2 = this.getPropertyDescriptor(t2, i2, s2);
      void 0 !== h2 && e$2(this.prototype, t2, h2);
    }
  }
  static getPropertyDescriptor(t2, s2, i2) {
    const { get: e2, set: r2 } = h(this.prototype, t2) ?? { get() {
      return this[s2];
    }, set(t3) {
      this[s2] = t3;
    } };
    return { get: e2, set(s3) {
      const h2 = e2 == null ? void 0 : e2.call(this);
      r2 == null ? void 0 : r2.call(this, s3), this.requestUpdate(t2, h2, i2);
    }, configurable: true, enumerable: true };
  }
  static getPropertyOptions(t2) {
    return this.elementProperties.get(t2) ?? b;
  }
  static _$Ei() {
    if (this.hasOwnProperty(d("elementProperties"))) return;
    const t2 = n$1(this);
    t2.finalize(), void 0 !== t2.l && (this.l = [...t2.l]), this.elementProperties = new Map(t2.elementProperties);
  }
  static finalize() {
    if (this.hasOwnProperty(d("finalized"))) return;
    if (this.finalized = true, this._$Ei(), this.hasOwnProperty(d("properties"))) {
      const t3 = this.properties, s2 = [...r$2(t3), ...o$1(t3)];
      for (const i2 of s2) this.createProperty(i2, t3[i2]);
    }
    const t2 = this[Symbol.metadata];
    if (null !== t2) {
      const s2 = litPropertyMetadata.get(t2);
      if (void 0 !== s2) for (const [t3, i2] of s2) this.elementProperties.set(t3, i2);
    }
    this._$Eh = /* @__PURE__ */ new Map();
    for (const [t3, s2] of this.elementProperties) {
      const i2 = this._$Eu(t3, s2);
      void 0 !== i2 && this._$Eh.set(i2, t3);
    }
    this.elementStyles = this.finalizeStyles(this.styles);
  }
  static finalizeStyles(s2) {
    const i2 = [];
    if (Array.isArray(s2)) {
      const e2 = new Set(s2.flat(1 / 0).reverse());
      for (const s3 of e2) i2.unshift(c$1(s3));
    } else void 0 !== s2 && i2.push(c$1(s2));
    return i2;
  }
  static _$Eu(t2, s2) {
    const i2 = s2.attribute;
    return false === i2 ? void 0 : "string" == typeof i2 ? i2 : "string" == typeof t2 ? t2.toLowerCase() : void 0;
  }
  constructor() {
    super(), this._$Ep = void 0, this.isUpdatePending = false, this.hasUpdated = false, this._$Em = null, this._$Ev();
  }
  _$Ev() {
    var _a;
    this._$ES = new Promise((t2) => this.enableUpdating = t2), this._$AL = /* @__PURE__ */ new Map(), this._$E_(), this.requestUpdate(), (_a = this.constructor.l) == null ? void 0 : _a.forEach((t2) => t2(this));
  }
  addController(t2) {
    var _a;
    (this._$EO ?? (this._$EO = /* @__PURE__ */ new Set())).add(t2), void 0 !== this.renderRoot && this.isConnected && ((_a = t2.hostConnected) == null ? void 0 : _a.call(t2));
  }
  removeController(t2) {
    var _a;
    (_a = this._$EO) == null ? void 0 : _a.delete(t2);
  }
  _$E_() {
    const t2 = /* @__PURE__ */ new Map(), s2 = this.constructor.elementProperties;
    for (const i2 of s2.keys()) this.hasOwnProperty(i2) && (t2.set(i2, this[i2]), delete this[i2]);
    t2.size > 0 && (this._$Ep = t2);
  }
  createRenderRoot() {
    const t2 = this.shadowRoot ?? this.attachShadow(this.constructor.shadowRootOptions);
    return S(t2, this.constructor.elementStyles), t2;
  }
  connectedCallback() {
    var _a;
    this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this.enableUpdating(true), (_a = this._$EO) == null ? void 0 : _a.forEach((t2) => {
      var _a2;
      return (_a2 = t2.hostConnected) == null ? void 0 : _a2.call(t2);
    });
  }
  enableUpdating(t2) {
  }
  disconnectedCallback() {
    var _a;
    (_a = this._$EO) == null ? void 0 : _a.forEach((t2) => {
      var _a2;
      return (_a2 = t2.hostDisconnected) == null ? void 0 : _a2.call(t2);
    });
  }
  attributeChangedCallback(t2, s2, i2) {
    this._$AK(t2, i2);
  }
  _$ET(t2, s2) {
    var _a;
    const i2 = this.constructor.elementProperties.get(t2), e2 = this.constructor._$Eu(t2, i2);
    if (void 0 !== e2 && true === i2.reflect) {
      const h2 = (void 0 !== ((_a = i2.converter) == null ? void 0 : _a.toAttribute) ? i2.converter : u).toAttribute(s2, i2.type);
      this._$Em = t2, null == h2 ? this.removeAttribute(e2) : this.setAttribute(e2, h2), this._$Em = null;
    }
  }
  _$AK(t2, s2) {
    var _a, _b;
    const i2 = this.constructor, e2 = i2._$Eh.get(t2);
    if (void 0 !== e2 && this._$Em !== e2) {
      const t3 = i2.getPropertyOptions(e2), h2 = "function" == typeof t3.converter ? { fromAttribute: t3.converter } : void 0 !== ((_a = t3.converter) == null ? void 0 : _a.fromAttribute) ? t3.converter : u;
      this._$Em = e2, this[e2] = h2.fromAttribute(s2, t3.type) ?? ((_b = this._$Ej) == null ? void 0 : _b.get(e2)) ?? null, this._$Em = null;
    }
  }
  requestUpdate(t2, s2, i2) {
    var _a;
    if (void 0 !== t2) {
      const e2 = this.constructor, h2 = this[t2];
      if (i2 ?? (i2 = e2.getPropertyOptions(t2)), !((i2.hasChanged ?? f)(h2, s2) || i2.useDefault && i2.reflect && h2 === ((_a = this._$Ej) == null ? void 0 : _a.get(t2)) && !this.hasAttribute(e2._$Eu(t2, i2)))) return;
      this.C(t2, s2, i2);
    }
    false === this.isUpdatePending && (this._$ES = this._$EP());
  }
  C(t2, s2, { useDefault: i2, reflect: e2, wrapped: h2 }, r2) {
    i2 && !(this._$Ej ?? (this._$Ej = /* @__PURE__ */ new Map())).has(t2) && (this._$Ej.set(t2, r2 ?? s2 ?? this[t2]), true !== h2 || void 0 !== r2) || (this._$AL.has(t2) || (this.hasUpdated || i2 || (s2 = void 0), this._$AL.set(t2, s2)), true === e2 && this._$Em !== t2 && (this._$Eq ?? (this._$Eq = /* @__PURE__ */ new Set())).add(t2));
  }
  async _$EP() {
    this.isUpdatePending = true;
    try {
      await this._$ES;
    } catch (t3) {
      Promise.reject(t3);
    }
    const t2 = this.scheduleUpdate();
    return null != t2 && await t2, !this.isUpdatePending;
  }
  scheduleUpdate() {
    return this.performUpdate();
  }
  performUpdate() {
    var _a;
    if (!this.isUpdatePending) return;
    if (!this.hasUpdated) {
      if (this.renderRoot ?? (this.renderRoot = this.createRenderRoot()), this._$Ep) {
        for (const [t4, s3] of this._$Ep) this[t4] = s3;
        this._$Ep = void 0;
      }
      const t3 = this.constructor.elementProperties;
      if (t3.size > 0) for (const [s3, i2] of t3) {
        const { wrapped: t4 } = i2, e2 = this[s3];
        true !== t4 || this._$AL.has(s3) || void 0 === e2 || this.C(s3, void 0, i2, e2);
      }
    }
    let t2 = false;
    const s2 = this._$AL;
    try {
      t2 = this.shouldUpdate(s2), t2 ? (this.willUpdate(s2), (_a = this._$EO) == null ? void 0 : _a.forEach((t3) => {
        var _a2;
        return (_a2 = t3.hostUpdate) == null ? void 0 : _a2.call(t3);
      }), this.update(s2)) : this._$EM();
    } catch (s3) {
      throw t2 = false, this._$EM(), s3;
    }
    t2 && this._$AE(s2);
  }
  willUpdate(t2) {
  }
  _$AE(t2) {
    var _a;
    (_a = this._$EO) == null ? void 0 : _a.forEach((t3) => {
      var _a2;
      return (_a2 = t3.hostUpdated) == null ? void 0 : _a2.call(t3);
    }), this.hasUpdated || (this.hasUpdated = true, this.firstUpdated(t2)), this.updated(t2);
  }
  _$EM() {
    this._$AL = /* @__PURE__ */ new Map(), this.isUpdatePending = false;
  }
  get updateComplete() {
    return this.getUpdateComplete();
  }
  getUpdateComplete() {
    return this._$ES;
  }
  shouldUpdate(t2) {
    return true;
  }
  update(t2) {
    this._$Eq && (this._$Eq = this._$Eq.forEach((t3) => this._$ET(t3, this[t3]))), this._$EM();
  }
  updated(t2) {
  }
  firstUpdated(t2) {
  }
}
y.elementStyles = [], y.shadowRootOptions = { mode: "open" }, y[d("elementProperties")] = /* @__PURE__ */ new Map(), y[d("finalized")] = /* @__PURE__ */ new Map(), p == null ? void 0 : p({ ReactiveElement: y }), (a.reactiveElementVersions ?? (a.reactiveElementVersions = [])).push("2.1.0");
const o = { attribute: true, type: String, converter: u, reflect: false, hasChanged: f }, r$1 = (t2 = o, e2, r2) => {
  const { kind: n3, metadata: i2 } = r2;
  let s2 = globalThis.litPropertyMetadata.get(i2);
  if (void 0 === s2 && globalThis.litPropertyMetadata.set(i2, s2 = /* @__PURE__ */ new Map()), "setter" === n3 && ((t2 = Object.create(t2)).wrapped = true), s2.set(r2.name, t2), "accessor" === n3) {
    const { name: o2 } = r2;
    return { set(r3) {
      const n4 = e2.get.call(this);
      e2.set.call(this, r3), this.requestUpdate(o2, n4, t2);
    }, init(e3) {
      return void 0 !== e3 && this.C(o2, void 0, t2, e3), e3;
    } };
  }
  if ("setter" === n3) {
    const { name: o2 } = r2;
    return function(r3) {
      const n4 = this[o2];
      e2.call(this, r3), this.requestUpdate(o2, n4, t2);
    };
  }
  throw Error("Unsupported decorator location: " + n3);
};
function n2(t2) {
  return (e2, o2) => "object" == typeof o2 ? r$1(t2, e2, o2) : ((t3, e3, o3) => {
    const r2 = e3.hasOwnProperty(o3);
    return e3.constructor.createProperty(o3, t3), r2 ? Object.getOwnPropertyDescriptor(e3, o3) : void 0;
  })(t2, e2, o2);
}
function r(r2) {
  return n2({ ...r2, state: true, attribute: false });
}
const e$1 = (e2, t2, c2) => (c2.configurable = true, c2.enumerable = true, Reflect.decorate && "object" != typeof t2 && Object.defineProperty(e2, t2, c2), c2);
function e(e2, r2) {
  return (n3, s2, i2) => {
    const o2 = (t2) => {
      var _a;
      return ((_a = t2.renderRoot) == null ? void 0 : _a.querySelector(e2)) ?? null;
    };
    return e$1(n3, s2, { get() {
      return o2(this);
    } });
  };
}
const styles$k = css``;
var __defProp$l = Object.defineProperty;
var __getOwnPropDesc$j = Object.getOwnPropertyDescriptor;
var __decorateClass$l = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$j(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$l(target, key, result);
  return result;
};
let IconError = class extends LitElement {
  constructor() {
    super();
    this.size = 24;
    this.color = "currentColor";
  }
  render() {
    return html`
      <svg role="status" aria-label="Success" width=${this.size} height=${this.size} viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
        <g fill="none" stroke=${this.color} stroke-linecap="round" stroke-linejoin="round" stroke-width="5">

          <path
            stroke-dasharray="138"
            stroke-dashoffset="138"
            d="m25 2.5c12 0 22 10 22 22s-10 22-22 22-22-10-22-22 10-22 22-22z"
            fill="#f00"
            fill-opacity="0"
            stroke=${this.color}
            stroke-width="5"
          >
            <animate fill="freeze" attributeName="fill-opacity" begin="0.6s" dur="0.15s" values="0;0.3" />
            <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="138;0" />
          </path>
          <path
            d="m25 25 10 10m-10-10-10-10m10 10-10 10m10-10 10-10"
            stroke-dasharray="16"
            stroke-dashoffset="16">
            <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.75s" dur="0.2s" values="16;0" />
          </path>
        </g>
      </svg>

    `;
  }
};
IconError.styles = styles$k;
__decorateClass$l([
  n2({ attribute: "size", type: Number })
], IconError.prototype, "size", 2);
__decorateClass$l([
  n2({ attribute: "color", type: String })
], IconError.prototype, "color", 2);
IconError = __decorateClass$l([
  t$1("lc-icon-error")
], IconError);
const styles$j = css``;
var __defProp$k = Object.defineProperty;
var __getOwnPropDesc$i = Object.getOwnPropertyDescriptor;
var __decorateClass$k = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$i(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$k(target, key, result);
  return result;
};
let IconSuccess = class extends LitElement {
  constructor() {
    super();
    this.size = 24;
    this.color = "currentColor";
  }
  render() {
    return html`
      <svg role="status" aria-label="Success" width=${this.size} height=${this.size} viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
        <g fill="none" stroke=${this.color} stroke-linecap="round" stroke-linejoin="round" stroke-width="5">
          <path
            fill=${this.color}
            fill-opacity="0"
            stroke-dasharray="138"
            stroke-dashoffset="138"
            d="m2.5 25c0-12 10-22 22-22s22 10 22 22-10 22-22 22-22-10-22-22z"
          >
            <animate fill="freeze" attributeName="fill-opacity" begin="0.6s" dur="0.15s" values="0;0.2" />
            <animate fill="freeze" attributeName="stroke-dashoffset" dur="0.6s" values="138;0" />
          </path>
          <path stroke-dasharray="30" stroke-dashoffset="30" d="m15 25 7.5 7.5 12-12">
            <animate fill="freeze" attributeName="stroke-dashoffset" begin="0.75s" dur="0.15s" values="30;0" />
          </path>
        </g>
      </svg>
    `;
  }
};
IconSuccess.styles = styles$j;
__decorateClass$k([
  n2({ attribute: "size", type: Number })
], IconSuccess.prototype, "size", 2);
__decorateClass$k([
  n2({ attribute: "color", type: String })
], IconSuccess.prototype, "color", 2);
IconSuccess = __decorateClass$k([
  t$1("lc-icon-success")
], IconSuccess);
const styles$i = css``;
var __defProp$j = Object.defineProperty;
var __getOwnPropDesc$h = Object.getOwnPropertyDescriptor;
var __decorateClass$j = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$h(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$j(target, key, result);
  return result;
};
let IconSpinner = class extends LitElement {
  constructor() {
    super();
    this.size = 24;
    this.color = "currentColor";
  }
  render() {
    return html`
      <svg role="progressbar" aria-label="Loading" width=${this.size} height=${this.size} viewBox="0 0 50 50" xmlns="http://www.w3.org/2000/svg">
        <g fill="none" stroke=${this.color} stroke-linecap="round" stroke-width="5">
          <circle cx="25" cy="25" r="22" opacity="0.3" />
          <g>
            <circle cx="25" cy="25" r="22"  stroke-dasharray="0 138" stroke-dashoffset="0">
              <animate attributeName="stroke-dasharray" dur="1.5s" calcMode="linear" values="0 1400;38 1400;100 1400;100 1400" keyTimes="0;0.33;0.66;1" repeatCount="indefinite" />
              <animate attributeName="stroke-dashoffset" dur="1.5s" calcMode="linear" values="0;-38;-100;-139" keyTimes="0;0.33;0.66;1" repeatCount="indefinite" />
            </circle>
            <animateTransform attributeName="transform" type="rotate" dur="1.5s" values="0 25 25;360 25 25" repeatCount="indefinite" />
          </g>
        </g>
      </svg>
    `;
  }
};
IconSpinner.styles = styles$i;
__decorateClass$j([
  n2({ attribute: "size", type: Number })
], IconSpinner.prototype, "size", 2);
__decorateClass$j([
  n2({ attribute: "color", type: String })
], IconSpinner.prototype, "color", 2);
IconSpinner = __decorateClass$j([
  t$1("lc-icon-spinner")
], IconSpinner);
function fireEvent(node, type2, detail, options = {}) {
  const _detail = detail === null || detail === void 0 ? {} : detail;
  const event = new Event(type2, {
    bubbles: options.bubbles === void 0 ? true : options.bubbles,
    cancelable: Boolean(options.cancelable),
    composed: options.composed === void 0 ? true : options.composed
  });
  event.detail = _detail;
  node.dispatchEvent(event);
  return event;
}
const CODE_COMPONENTS = {
  homeassistant: "Home Assistant Core Integration"
};
function formatActionName(domain, service, localize) {
  const serviceName = service.name;
  let componentName;
  if (domain in CODE_COMPONENTS) {
    componentName = CODE_COMPONENTS[domain];
  } else {
    componentName = localize(`component.${domain}.entity_component._.name`);
  }
  if (!componentName) {
    componentName = domain.split(/[-_]/g).map((w) => w.charAt(0).toUpperCase() + w.slice(1)).join(" ");
  }
  return `${componentName}: ${serviceName}`;
}
const DEFAULT_SERVICE_ICON = "mdi:room-service";
const DOMAIN_ICONS = {
  air_quality: "mdi:air-filter",
  alert: "mdi:alert",
  automation: "mdi:robot",
  calendar: "mdi:calendar",
  climate: "mdi:thermostat",
  configurator: "mdi:cog",
  conversation: "mdi:forum-outline",
  counter: "mdi:counter",
  date: "mdi:calendar",
  datetime: "mdi:calendar-clock",
  demo: "mdi:home-assistant",
  device_tracker: "mdi:account",
  google_assistant: "mdi:google-assistant",
  group: "mdi:google-circles-communities",
  homeassistant: "mdi:home-assistant",
  homekit: "mdi:home-automation",
  image_processing: "mdi:image-filter-frames",
  image: "mdi:image",
  input_boolean: "mdi:toggle-switch",
  input_button: "mdi:button-pointer",
  input_datetime: "mdi:calendar-clock",
  input_number: "mdi:ray-vertex",
  input_select: "mdi:format-list-bulleted",
  input_text: "mdi:form-textbox",
  lawn_mower: "mdi:robot-mower",
  light: "mdi:lightbulb",
  notify: "mdi:comment-alert",
  number: "mdi:ray-vertex",
  persistent_notification: "mdi:bell",
  person: "mdi:account",
  plant: "mdi:flower",
  proximity: "mdi:apple-safari",
  remote: "mdi:remote",
  scene: "mdi:palette",
  schedule: "mdi:calendar-clock",
  script: "mdi:script-text",
  select: "mdi:format-list-bulleted",
  sensor: "mdi:eye",
  simple_alarm: "mdi:bell",
  siren: "mdi:bullhorn",
  stt: "mdi:microphone-message",
  sun: "mdi:white-balance-sunny",
  text: "mdi:form-textbox",
  time: "mdi:clock",
  timer: "mdi:timer-outline",
  todo: "mdi:clipboard-list",
  tts: "mdi:speaker-message",
  vacuum: "mdi:robot-vacuum",
  wake_word: "mdi:chat-sleep",
  weather: "mdi:weather-partly-cloudy",
  zone: "mdi:map-marker-radius",
  fan: "mdi:fan"
};
const OFF_SUPPORTS = ["automation", "fan", "light", "input_boolean"];
function getServiceIcon(service) {
  const [domain, serviceName] = service.split(".", 2);
  if (serviceName === "pause") {
    return "mdi:pause";
  }
  if (serviceName === "reload") {
    return "mdi:reload";
  }
  const iconName = DOMAIN_ICONS[domain];
  if (iconName && /_off$/.test(serviceName) && OFF_SUPPORTS.includes(domain)) {
    return iconName + "-off";
  }
  return iconName || DEFAULT_SERVICE_ICON;
}
function computeDomain(entityId) {
  return entityId.substring(0, entityId.indexOf("."));
}
function processEntities(entities) {
  if (!entities) return [];
  const results = [];
  for (let i2 = 0; i2 < entities.length; i2++) {
    const entity = entities[i2];
    if (!entity) continue;
    if (typeof entity === "string") {
      results.push({ entity });
    } else if (typeof entity === "object" && !Array.isArray(entity)) {
      if ("type" in entity || "entity" in entity) {
        results.push({ ...entity });
      } else {
        throw new Error(`Object at position ${i2} is missing entity or type field`);
      }
    } else {
      throw new Error(`Invalid entity at position ${i2}`);
    }
  }
  return results;
}
function processGauges(gauges, maxCount = 2) {
  if (!gauges) return [];
  if (gauges.length > maxCount) {
    throw new Error(`MAx gauge count is ${maxCount}`);
  }
  const results = [];
  for (let i2 = 0; i2 < gauges.length; i2++) {
    const gauge = gauges[i2];
    if (!gauge) continue;
    if (typeof gauge === "string") {
      results.push({ entity: gauge });
    } else if (typeof gauge === "object" && !Array.isArray(gauge)) {
      if ("type" in gauge || "entity" in gauge) {
        results.push({ ...gauge });
      } else {
        throw new Error(`Gauge at position ${i2} is missing entity or type field`);
      }
    } else {
      throw new Error(`Invalid gauge at position ${i2}`);
    }
  }
  return results;
}
function arrayFilter(array2, conditions, maxSize) {
  if (!maxSize || maxSize > array2.length) {
    maxSize = array2.length;
  }
  const filteredArray = [];
  for (let i2 = 0; i2 < array2.length && filteredArray.length < maxSize; i2++) {
    let meetsConditions = true;
    for (const condition of conditions) {
      if (!condition(array2[i2])) {
        meetsConditions = false;
        break;
      }
    }
    if (meetsConditions) {
      filteredArray.push(array2[i2]);
    }
  }
  return filteredArray;
}
function findEntities(hass, maxEntities, entities, entitiesFallback, includeDomains, entityFilter) {
  const conditions = [];
  if (includeDomains == null ? void 0 : includeDomains.length) {
    conditions.push((eid) => includeDomains.includes(computeDomain(eid)));
  }
  if (entityFilter) {
    conditions.push(
      (eid) => hass.states[eid] && entityFilter(hass.states[eid])
    );
  }
  const entityIds = arrayFilter(entities, conditions, maxEntities);
  if (entityIds.length < maxEntities && entitiesFallback.length) {
    const fallbackEntityIds = findEntities(
      hass,
      maxEntities - entityIds.length,
      entitiesFallback,
      [],
      includeDomains,
      entityFilter
    );
    entityIds.push(...fallbackEntityIds);
  }
  return entityIds;
}
function getServicesSelectOptions(hass) {
  const domains = Object.keys(hass.services);
  const options = [];
  for (let i2 = 0; i2 < domains.length; i2++) {
    const domain = domains[i2];
    const services = hass.services[domain];
    const servicesNames = Object.keys(services);
    for (let j = 0; j < servicesNames.length; j++) {
      const serviceName = servicesNames[j];
      const serviceId = `${domain}.${serviceName}`;
      options.push({
        value: serviceId,
        label: services[serviceName].name,
        secondLabel: serviceId,
        icon: getServiceIcon(serviceId)
      });
    }
  }
  return options;
}
function getEntitiesSelectOptions(hass) {
  const options = [];
  for (const [entityId, entity] of Object.entries(hass.entities)) {
    const stateObj = hass.states[entityId];
    options.push({
      value: entityId,
      label: entity.name,
      secondLabel: entityId,
      icon: html`
        <ha-state-icon
          .hass=${hass}
          .stateObj=${stateObj}
        ></ha-state-icon>
      `
    });
  }
  return options;
}
function getGaugesSelectOptions(hass) {
  const options = [];
  for (const [entityId, entity] of Object.entries(hass.entities)) {
    const domain = computeDomain(entityId);
    let allowed = domain === "counter" || domain === "sensor" || domain === "input_number" || domain === "number";
    if (allowed) {
      const state = hass.states[entityId].state;
      allowed = !isNaN(Number(state));
    }
    if (!allowed) {
      const attValues = Object.values(hass.states[entityId].attributes);
      allowed = attValues.some((value) => typeof value === "number");
    }
    if (allowed) {
      options.push({
        value: entityId,
        label: entity.name,
        secondLabel: entityId,
        icon: html`
          <ha-state-icon
            .hass=${hass}
            .stateObj=${hass.states[entityId]}
          ></ha-state-icon>
        `
      });
    }
  }
  return options;
}
const styles$h = css`:host {
  display: block;
}

.buttons .button-config {
  margin-top: 8px;
  display: flex;
  align-items: center;
}
.buttons .button-config .handle {
  padding-right: 8px;
  cursor: grab;
  padding-inline-end: 8px;
}
.buttons .button-config .edit-button {
  flex-grow: 1;
}
.buttons .button-config .action-button {
  --lc-button-size: 36px;
  color: var(--secondary-text-color);
}

.add-button {
  margin-top: 8px;
  display: block;
  margin-left: 31px;
  margin-right: 71px;
  margin-inline-start: 31px;
  margin-inline-end: 71px;
  direction: var(--direction);
}`;
var __defProp$i = Object.defineProperty;
var __getOwnPropDesc$g = Object.getOwnPropertyDescriptor;
var __decorateClass$i = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$g(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$i(target, key, result);
  return result;
};
let FooterButtonsEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this.options = [];
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this.options = getServicesSelectOptions(this.hass);
  }
  render() {
    if (!this.hass) return html``;
    return html`
      <h3>
        <span>${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.buttons")}</span>
      </h3>

      ${this._renderButtonsConfigs()}

      <lc-select
        class="add-button"
        .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.choose_action")}
        .options=${this.options}
        @value-changed=${this._addButton}
      ></lc-select>
    `;
  }
  _renderButtonsConfigs() {
    if (!this.buttons) return html``;
    return html`
      <ha-sortable handle-selector=".handle" @item-moved=${this._rowMoved}>
        <div class="buttons">
          ${this.buttons.map((button, index) => this._renderButtonConfig(index, button))}
        </div>
      </ha-sortable>
    `;
  }
  _renderButtonConfig(index, button) {
    var _a;
    return html`
      <div class="button-config">
        <div class="handle">
          <ha-icon icon="mdi:drag" class="icon"></ha-icon>
        </div>

        <lc-select
          class="edit-button"
          .index=${index}
          .label=${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.button")}
          .getValue=${(value) => {
      var _a2, _b, _c;
      const [domain, action] = value.split(".");
      const service = action && ((_c = (_b = (_a2 = this.hass) == null ? void 0 : _a2.services) == null ? void 0 : _b[domain]) == null ? void 0 : _c[action]) || void 0;
      return service ? formatActionName(domain, service, this.hass.localize) : value;
    }}
          .options=${this.options}
          .value=${button.action}
          @value-changed=${this._changeValue}
        ></lc-select>

        <lc-button-circle
          icon="mdi:close"
          .index=${index}
          .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.remove_button")}
          class="action-button"
          @click=${this._removeRow}
          transparent
        ></lc-button-circle>

        <lc-button-circle
          icon="mdi:pencil"
          .index=${index}
          .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.configure_button")}
          class="action-button"
          @click=${this._editRow}
          transparent
        ></lc-button-circle>
      </div>

    `;
  }
  _addButton(event) {
    const value = event.detail.value;
    if (value === "") {
      return;
    }
    const button = {
      action: value,
      icon: "lc:play"
    };
    event.target.value = "";
    fireEvent(this, "buttons-changed", { buttons: [...this.buttons || [], button] });
  }
  _editRow(event) {
    const index = event.currentTarget.index;
    fireEvent(this, "edit-detail-element", {
      subElementConfig: {
        index,
        type: "footer-button",
        elementConfig: this.buttons[index]
      }
    });
  }
  _removeRow(event) {
    const index = event.currentTarget.index;
    const buttons = this.buttons.concat();
    buttons.splice(index, 1);
    fireEvent(this, "buttons-changed", { buttons });
  }
  _changeValue(event) {
    const value = event.detail.value;
    const index = event.target.index;
    const buttons = this.buttons.concat();
    if (value === "" || value === void 0) {
      buttons.splice(index, 1);
    } else {
      buttons[index] = {
        ...buttons[index],
        action: value
      };
    }
    fireEvent(this, "buttons-changed", { buttons });
  }
  _rowMoved(event) {
    event.stopPropagation();
    const { oldIndex, newIndex } = event.detail;
    const buttons = this.buttons.concat();
    buttons.splice(newIndex, 0, buttons.splice(oldIndex, 1)[0]);
    fireEvent(this, "buttons-changed", { buttons });
  }
};
FooterButtonsEditor.styles = styles$h;
__decorateClass$i([
  n2({ attribute: false })
], FooterButtonsEditor.prototype, "hass", 2);
__decorateClass$i([
  n2({ attribute: false })
], FooterButtonsEditor.prototype, "buttons", 2);
__decorateClass$i([
  r()
], FooterButtonsEditor.prototype, "options", 2);
FooterButtonsEditor = __decorateClass$i([
  t$1("lc-footer-buttons-editor")
], FooterButtonsEditor);
class StructError extends TypeError {
  constructor(failure, failures) {
    let cached;
    const { message, explanation, ...rest } = failure;
    const { path } = failure;
    const msg = path.length === 0 ? message : `At path: ${path.join(".")} -- ${message}`;
    super(explanation ?? msg);
    if (explanation != null)
      this.cause = msg;
    Object.assign(this, rest);
    this.name = this.constructor.name;
    this.failures = () => {
      return cached ?? (cached = [failure, ...failures()]);
    };
  }
}
function isIterable(x) {
  return isObject(x) && typeof x[Symbol.iterator] === "function";
}
function isObject(x) {
  return typeof x === "object" && x != null;
}
function isNonArrayObject(x) {
  return isObject(x) && !Array.isArray(x);
}
function print(value) {
  if (typeof value === "symbol") {
    return value.toString();
  }
  return typeof value === "string" ? JSON.stringify(value) : `${value}`;
}
function shiftIterator(input) {
  const { done, value } = input.next();
  return done ? void 0 : value;
}
function toFailure(result, context, struct, value) {
  if (result === true) {
    return;
  } else if (result === false) {
    result = {};
  } else if (typeof result === "string") {
    result = { message: result };
  }
  const { path, branch } = context;
  const { type: type2 } = struct;
  const { refinement, message = `Expected a value of type \`${type2}\`${refinement ? ` with refinement \`${refinement}\`` : ""}, but received: \`${print(value)}\`` } = result;
  return {
    value,
    type: type2,
    refinement,
    key: path[path.length - 1],
    path,
    branch,
    ...result,
    message
  };
}
function* toFailures(result, context, struct, value) {
  if (!isIterable(result)) {
    result = [result];
  }
  for (const r2 of result) {
    const failure = toFailure(r2, context, struct, value);
    if (failure) {
      yield failure;
    }
  }
}
function* run(value, struct, options = {}) {
  const { path = [], branch = [value], coerce = false, mask: mask2 = false } = options;
  const ctx = { path, branch, mask: mask2 };
  if (coerce) {
    value = struct.coercer(value, ctx);
  }
  let status = "valid";
  for (const failure of struct.validator(value, ctx)) {
    failure.explanation = options.message;
    status = "not_valid";
    yield [failure, void 0];
  }
  for (let [k, v, s2] of struct.entries(value, ctx)) {
    const ts = run(v, s2, {
      path: k === void 0 ? path : [...path, k],
      branch: k === void 0 ? branch : [...branch, v],
      coerce,
      mask: mask2,
      message: options.message
    });
    for (const t2 of ts) {
      if (t2[0]) {
        status = t2[0].refinement != null ? "not_refined" : "not_valid";
        yield [t2[0], void 0];
      } else if (coerce) {
        v = t2[1];
        if (k === void 0) {
          value = v;
        } else if (value instanceof Map) {
          value.set(k, v);
        } else if (value instanceof Set) {
          value.add(v);
        } else if (isObject(value)) {
          if (v !== void 0 || k in value)
            value[k] = v;
        }
      }
    }
  }
  if (status !== "not_valid") {
    for (const failure of struct.refiner(value, ctx)) {
      failure.explanation = options.message;
      status = "not_refined";
      yield [failure, void 0];
    }
  }
  if (status === "valid") {
    yield [void 0, value];
  }
}
class Struct {
  constructor(props) {
    const { type: type2, schema, validator, refiner, coercer = (value) => value, entries = function* () {
    } } = props;
    this.type = type2;
    this.schema = schema;
    this.entries = entries;
    this.coercer = coercer;
    if (validator) {
      this.validator = (value, context) => {
        const result = validator(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.validator = () => [];
    }
    if (refiner) {
      this.refiner = (value, context) => {
        const result = refiner(value, context);
        return toFailures(result, context, this, value);
      };
    } else {
      this.refiner = () => [];
    }
  }
  /**
   * Assert that a value passes the struct's validation, throwing if it doesn't.
   */
  assert(value, message) {
    return assert(value, this, message);
  }
  /**
   * Create a value with the struct's coercion logic, then validate it.
   */
  create(value, message) {
    return create(value, this, message);
  }
  /**
   * Check if a value passes the struct's validation.
   */
  is(value) {
    return is(value, this);
  }
  /**
   * Mask a value, coercing and validating it, but returning only the subset of
   * properties defined by the struct's schema. Masking applies recursively to
   * props of `object` structs only.
   */
  mask(value, message) {
    return mask(value, this, message);
  }
  /**
   * Validate a value with the struct's validation logic, returning a tuple
   * representing the result.
   *
   * You may optionally pass `true` for the `coerce` argument to coerce
   * the value before attempting to validate it. If you do, the result will
   * contain the coerced result when successful. Also, `mask` will turn on
   * masking of the unknown `object` props recursively if passed.
   */
  validate(value, options = {}) {
    return validate(value, this, options);
  }
}
function assert(value, struct, message) {
  const result = validate(value, struct, { message });
  if (result[0]) {
    throw result[0];
  }
}
function create(value, struct, message) {
  const result = validate(value, struct, { coerce: true, message });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function mask(value, struct, message) {
  const result = validate(value, struct, { coerce: true, mask: true, message });
  if (result[0]) {
    throw result[0];
  } else {
    return result[1];
  }
}
function is(value, struct) {
  const result = validate(value, struct);
  return !result[0];
}
function validate(value, struct, options = {}) {
  const tuples = run(value, struct, options);
  const tuple = shiftIterator(tuples);
  if (tuple[0]) {
    const error = new StructError(tuple[0], function* () {
      for (const t2 of tuples) {
        if (t2[0]) {
          yield t2[0];
        }
      }
    });
    return [error, void 0];
  } else {
    const v = tuple[1];
    return [void 0, v];
  }
}
function assign(...Structs) {
  const isType = Structs[0].type === "type";
  const schemas = Structs.map((s2) => s2.schema);
  const schema = Object.assign({}, ...schemas);
  return isType ? type(schema) : object(schema);
}
function define(name, validator) {
  return new Struct({ type: name, schema: null, validator });
}
function dynamic(fn) {
  return new Struct({
    type: "dynamic",
    schema: null,
    *entries(value, ctx) {
      const struct = fn(value, ctx);
      yield* struct.entries(value, ctx);
    },
    validator(value, ctx) {
      const struct = fn(value, ctx);
      return struct.validator(value, ctx);
    },
    coercer(value, ctx) {
      const struct = fn(value, ctx);
      return struct.coercer(value, ctx);
    },
    refiner(value, ctx) {
      const struct = fn(value, ctx);
      return struct.refiner(value, ctx);
    }
  });
}
function any() {
  return define("any", () => true);
}
function array(Element) {
  return new Struct({
    type: "array",
    schema: Element,
    *entries(value) {
      if (Element && Array.isArray(value)) {
        for (const [i2, v] of value.entries()) {
          yield [i2, v, Element];
        }
      }
    },
    coercer(value) {
      return Array.isArray(value) ? value.slice() : value;
    },
    validator(value) {
      return Array.isArray(value) || `Expected an array value, but received: ${print(value)}`;
    }
  });
}
function boolean() {
  return define("boolean", (value) => {
    return typeof value === "boolean";
  });
}
function enums(values) {
  const schema = {};
  const description = values.map((v) => print(v)).join();
  for (const key of values) {
    schema[key] = key;
  }
  return new Struct({
    type: "enums",
    schema,
    validator(value) {
      return values.includes(value) || `Expected one of \`${description}\`, but received: ${print(value)}`;
    }
  });
}
function integer() {
  return define("integer", (value) => {
    return typeof value === "number" && !isNaN(value) && Number.isInteger(value) || `Expected an integer, but received: ${print(value)}`;
  });
}
function literal(constant) {
  const description = print(constant);
  const t2 = typeof constant;
  return new Struct({
    type: "literal",
    schema: t2 === "string" || t2 === "number" || t2 === "boolean" ? constant : null,
    validator(value) {
      return value === constant || `Expected the literal \`${description}\`, but received: ${print(value)}`;
    }
  });
}
function never() {
  return define("never", () => false);
}
function number() {
  return define("number", (value) => {
    return typeof value === "number" && !isNaN(value) || `Expected a number, but received: ${print(value)}`;
  });
}
function object(schema) {
  const knowns = schema ? Object.keys(schema) : [];
  const Never = never();
  return new Struct({
    type: "object",
    schema: schema ? schema : null,
    *entries(value) {
      if (schema && isObject(value)) {
        const unknowns = new Set(Object.keys(value));
        for (const key of knowns) {
          unknowns.delete(key);
          yield [key, value[key], schema[key]];
        }
        for (const key of unknowns) {
          yield [key, value[key], Never];
        }
      }
    },
    validator(value) {
      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
    },
    coercer(value, ctx) {
      if (!isNonArrayObject(value)) {
        return value;
      }
      const coerced = { ...value };
      if (ctx.mask && schema) {
        for (const key in coerced) {
          if (schema[key] === void 0) {
            delete coerced[key];
          }
        }
      }
      return coerced;
    }
  });
}
function optional(struct) {
  return new Struct({
    ...struct,
    validator: (value, ctx) => value === void 0 || struct.validator(value, ctx),
    refiner: (value, ctx) => value === void 0 || struct.refiner(value, ctx)
  });
}
function string() {
  return define("string", (value) => {
    return typeof value === "string" || `Expected a string, but received: ${print(value)}`;
  });
}
function type(schema) {
  const keys = Object.keys(schema);
  return new Struct({
    type: "type",
    schema,
    *entries(value) {
      if (isObject(value)) {
        for (const k of keys) {
          yield [k, value[k], schema[k]];
        }
      }
    },
    validator(value) {
      return isNonArrayObject(value) || `Expected an object, but received: ${print(value)}`;
    },
    coercer(value) {
      return isNonArrayObject(value) ? { ...value } : value;
    }
  });
}
function union(Structs) {
  const description = Structs.map((s2) => s2.type).join(" | ");
  return new Struct({
    type: "union",
    schema: null,
    coercer(value, ctx) {
      for (const S2 of Structs) {
        const [error, coerced] = S2.validate(value, {
          coerce: true,
          mask: ctx.mask
        });
        if (!error) {
          return coerced;
        }
      }
      return value;
    },
    validator(value, ctx) {
      const failures = [];
      for (const S2 of Structs) {
        const [...tuples] = run(value, S2, ctx);
        const [first] = tuples;
        if (!first[0]) {
          return [];
        } else {
          for (const [failure] of tuples) {
            if (failure) {
              failures.push(failure);
            }
          }
        }
      }
      return [
        `Expected the value to satisfy a union of \`${description}\`, but received: ${print(value)}`,
        ...failures
      ];
    }
  });
}
function min(struct, threshold, options = {}) {
  const { exclusive } = options;
  return refine(struct, "min", (value) => {
    return exclusive ? value > threshold : value >= threshold || `Expected a ${struct.type} greater than ${exclusive ? "" : "or equal to "}${threshold} but received \`${value}\``;
  });
}
function refine(struct, name, refiner) {
  return new Struct({
    ...struct,
    *refiner(value, ctx) {
      yield* struct.refiner(value, ctx);
      const result = refiner(value, ctx);
      const failures = toFailures(result, ctx, struct, value);
      for (const failure of failures) {
        yield { ...failure, refinement: name };
      }
    }
  });
}
const ExemptionSchema = object({
  user: string()
});
const ConfirmDialogSchema = object({
  text: optional(string()),
  exemptions: optional(array(ExemptionSchema))
});
const ConfirmationConfigSchema = union([
  boolean(),
  ConfirmDialogSchema
]);
const TargetConfigSchema = object({
  entity_id: optional(union([string(), array(string())])),
  device_id: optional(union([string(), array(string())])),
  area_id: optional(union([string(), array(string())])),
  floor_id: optional(union([string(), array(string())])),
  label_id: optional(union([string(), array(string())]))
});
const ButtonConfigSchema = object({
  action: string(),
  color: optional(string()),
  icon: optional(string()),
  tooltip: optional(string()),
  data: optional(object()),
  target: optional(TargetConfigSchema),
  confirmation: optional(ConfirmationConfigSchema)
});
function extensiveField(value) {
  if (!value) return [];
  if (typeof value === "string") {
    return [value];
  }
  return Array.from(new Set(value));
}
function compactField(dist, src, field) {
  if (src[field]) {
    if (typeof src[field] === "string") {
      dist[field] = src[field];
    } else if (Array.isArray(src[field]) && src[field].length > 0) {
      dist[field] = src[field].length === 1 ? src[field][0] : src[field];
    }
  }
}
function compactTarget(src) {
  if (!src) return {};
  const dist = {};
  compactField(dist, src, "entity_id");
  compactField(dist, src, "device_id");
  compactField(dist, src, "label_id");
  compactField(dist, src, "floor_id");
  compactField(dist, src, "area_id");
  return dist;
}
function extensiveTarget(src = {}) {
  return {
    entity_id: extensiveField(src.entity_id),
    device_id: extensiveField(src.device_id),
    area_id: extensiveField(src.area_id),
    floor_id: extensiveField(src.floor_id),
    label_id: extensiveField(src.label_id)
  };
}
const styles$g = css`.container {
  margin-top: 10px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: auto;
  gap: 16px;
}
.container .row-full {
  grid-column: span 2/span 2;
}
.container hr {
  grid-column: span 2/span 2;
  width: 100%;
  border-color: var(--entities-divider-color, var(--divider-color));
}
.container .description {
  font-size: 12px;
  color: var(--secondary-text-color);
  line-height: 1.2;
}
.container .enable-confirm {
  margin: 8px 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.container .color-radio {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 10px;
}

.yaml-editor .error {
  margin-top: 8px;
  color: var(--error-color);
  font-size: 13px;
}`;
var __defProp$h = Object.defineProperty;
var __getOwnPropDesc$f = Object.getOwnPropertyDescriptor;
var __decorateClass$h = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$f(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$h(target, key, result);
  return result;
};
let FooterButtonEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this._options = [];
    this._guiMode = true;
  }
  get hasError() {
    return !!this._error;
  }
  get hasWarning() {
    return false;
  }
  get GUImode() {
    return this._guiMode;
  }
  set GUImode(guiMode) {
    this._guiMode = guiMode;
    this.updateComplete.then(() => {
      fireEvent(this, "GUImode-changed", {
        guiMode,
        guiModeAvailable: !(this.hasError || this._guiSupported === false)
      });
    });
  }
  set confirmationText(text) {
    const value = {
      ...this.value,
      confirmation: text ? { text } : true
    };
    fireEvent(this, "config-changed", {
      config: value
    });
  }
  get confirmationText() {
    var _a, _b, _c, _d;
    if (typeof ((_a = this.value) == null ? void 0 : _a.confirmation) !== "boolean" && ((_c = (_b = this.value) == null ? void 0 : _b.confirmation) == null ? void 0 : _c.text)) {
      return (_d = this.value) == null ? void 0 : _d.confirmation.text;
    }
    return this._confirmationText || "";
  }
  get actionId() {
    if (this._actionName && this._actionDomain) {
      return `${this._actionDomain}.${this._actionName}`;
    }
    return void 0;
  }
  set actionId(value) {
    if (value) {
      const [domain, name] = value.split(".", 2);
      this._actionDomain = domain || "";
      this._actionName = name || "";
    } else {
      this._actionDomain = void 0;
      this._actionName = void 0;
    }
  }
  get service() {
    if (!this._actionDomain || !this._actionName || !this.hass || !(this._actionDomain in this.hass.services)) return;
    return this.hass.services[this._actionDomain][this._actionName];
  }
  toggleMode() {
    this.GUImode = !this.GUImode;
  }
  focusYamlEditor() {
    var _a;
    (_a = this._yamlEditor) == null ? void 0 : _a.focus();
  }
  willUpdate(_changed) {
    var _a, _b;
    super.willUpdate(_changed);
    if (_changed.has("value")) {
      if (((_a = this.value) == null ? void 0 : _a.action) !== this.actionId) {
        this.actionId = (_b = this.value) == null ? void 0 : _b.action;
      }
    }
  }
  render() {
    var _a, _b, _c, _d;
    if (!this.hass || !this.value) return html``;
    if (!this._guiMode) {
      return this._renderYamlEditor();
    }
    return html`
      <div class="container">
        <!-- Action Selector-->
        <lc-select
          class="row-full"
          .value=${(_a = this.value) == null ? void 0 : _a.action}
          .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.action")} *"
          .options=${this._options}
          .configValue=${"action"}
          .getValue=${(value) => {
      var _a2, _b2, _c2;
      const [domain, action] = value.split(".");
      const service = action && ((_c2 = (_b2 = (_a2 = this.hass) == null ? void 0 : _a2.services) == null ? void 0 : _b2[domain]) == null ? void 0 : _c2[action]) || void 0;
      return service ? formatActionName(domain, service, this.hass.localize) : value;
    }}
          .helper=${(_b = this.service) == null ? void 0 : _b.description}
          @value-changed=${this._valueChanged}
        ></lc-select>

        <!-- Action Target Selector -->
        ${this._renderServiceTargetSelector()}

        <!-- Action Data Field -->
        ${this._renderServiceDataFields()}

        <hr />

        <!-- Tooltip -->
        <ha-textfield
          class="input"
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.button_tooltip")}
          .value=${((_c = this.value) == null ? void 0 : _c.tooltip) || ""}
          .configValue=${"tooltip"}
          @input=${this._valueChanged}
        >
          <slot name="icon" slot="leadingIcon"></slot>
        </ha-textfield>

        <!-- Icon -->
        <ha-icon-picker
          .hass=${this.hass}
          .label=${this.hass.localize("ui.panel.lovelace.editor.card.generic.icon")}
          .value=${this.value.icon}
          .required=${false}
          .disabled=${false}
          .configValue=${"icon"}
          .placeholder=${"lc:placeholder"}
          @value-changed=${this._valueChanged}
        >
        </ha-icon-picker>

        <!-- Enable confirmation -->
        <div class="row-full enable-confirm">
          <span>${this.hass.localize("component.advanced_ui_cards.entity_component._.show_confirmation_dialog")}</span>

          <lc-switch
            .checked=${!!this.value.confirmation}
            @change=${this._toggleConfirmSwitch}
          ></lc-switch>
        </div>

        <!-- Confirmation text -->
        <ha-textfield
          class="row-full"
          .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.confirm_text")}"
          .value=${this.confirmationText}
          .configValue=${"confirmation"}
          .disabled=${!((_d = this.value) == null ? void 0 : _d.confirmation)}
          @input=${this._valueChanged}
        >
          <slot name="icon" slot="leadingIcon"></slot>
        </ha-textfield>

        <!-- Select color -->
        <ha-selector
          class="row-full"
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.button_color")}
          .value=${this.value.color}
          .configValue=${"color"}
          .selector=${{ ui_color: {} }}
          .localize=${this.hass.localize}
          @value-changed=${this._valueChanged}
        ></ha-selector>
      </div>
    `;
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this._options = getServicesSelectOptions(this.hass);
  }
  _renderServiceTargetSelector() {
    var _a;
    const service = this.service;
    if (!service || !this.hass) return html``;
    const targets = service.target ? Object.keys(service.target) : [];
    if (!targets.length) return html``;
    return html`
      <div class="row-full">
        <ha-selector
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.choose_action_target")}
          .hass=${this.hass}
          .selector=${{ target: { ...service.target } }}
          @value-changed=${this._valueChanged}
          .configValue=${"target"}
          .value=${extensiveTarget((_a = this.value) == null ? void 0 : _a.target)}
        ></ha-selector>
      </div>
    `;
  }
  _renderServiceDataFields() {
    const service = this.service;
    if (!service || !this.hass) return html``;
    const fieldsIds = service.fields ? Object.keys(service.fields) : [];
    if (!fieldsIds.length) return html``;
    return html`${fieldsIds.map((fieldId) => {
      var _a, _b;
      const fields = service.fields[fieldId];
      if (!fields.required) return html``;
      return html`
          <div class="row-full">
            <ha-selector
              .label=${fields.name}
              .helper=${fields.description}
              .hass=${this.hass}
              .selector=${fields.selector}
              @value-changed=${this._valueChanged}
              .configValue=${"data"}
              .dataField=${fieldId}
              .value=${((_b = (_a = this.value) == null ? void 0 : _a.data) == null ? void 0 : _b[fieldId]) || ""}
            ></ha-selector>
          </div>
        `;
    })}`;
  }
  _renderYamlEditor() {
    return html`
      <div class="yaml-editor">
        <ha-yaml-editor
          .defaultValue=${this.value}
          autofocus
          .hass=${this.hass}
          @value-changed=${this._handleYAMLChanged}
          dir="ltr"
        ></ha-yaml-editor>

        ${this._error ? html`
          <div class="error">${this._error}</div>` : null}
      </div>
    `;
  }
  _handleYAMLChanged(event) {
    event.stopPropagation();
    const config = event.detail.value;
    if (event.detail.isValid) {
      try {
        assert(config, ButtonConfigSchema);
        this.value = config;
        this._error = void 0;
        fireEvent(this, "config-changed", { config });
      } catch (e2) {
        this._error = `${e2.message}`.trim();
      }
    } else {
      this._error = `${event.detail.errorMsg}`.trim();
    }
  }
  _toggleConfirmSwitch(event) {
    var _a;
    const config = { ...this.value };
    const checked = !!event.detail.checked;
    if (checked) {
      if (this._confirmationText) {
        config.confirmation = { text: this._confirmationText };
        this._confirmationText = "";
      } else {
        config.confirmation = true;
      }
    } else {
      if (typeof config.confirmation !== "boolean" && ((_a = config.confirmation) == null ? void 0 : _a.text)) {
        this._confirmationText = config.confirmation.text;
      }
      config.confirmation = false;
    }
    fireEvent(this, "config-changed", { config });
  }
  _valueChanged(event) {
    var _a, _b;
    const configValue = event.target.configValue;
    const value = ["target", "color", "data"].includes(configValue) ? event.detail.value : event.target.value;
    const config = { ...this.value };
    if (configValue === "action") {
      const [domain, name] = value.split(".", 2);
      const service = (_a = this.hass.services[domain]) == null ? void 0 : _a[name];
      this._error = void 0;
      if (!service) {
        this._error = this.hass.localize("ui.errors.config.configuration_error");
        return;
      }
      if (service.target && Object.keys(service.target).length) {
        config.target = {};
      } else {
        Reflect.deleteProperty(config, "target");
      }
      if (service.fields && Object.keys(service.fields).length) {
        config.data = {};
      } else {
        Reflect.deleteProperty(config, "data");
      }
      config.action = value;
    } else if (configValue === "confirmation") {
      config.confirmation = value ? { text: value } : true;
    } else if (configValue === "target") {
      config.target = compactTarget(value);
    } else if (configValue === "data") {
      const dataField = event.target.dataField;
      config.data = { ...((_b = this.value) == null ? void 0 : _b.data) || {} };
      config.data[dataField] = value;
    } else {
      config[configValue] = value;
    }
    fireEvent(this, "config-changed", { config });
  }
};
FooterButtonEditor.styles = styles$g;
__decorateClass$h([
  n2({ attribute: false })
], FooterButtonEditor.prototype, "hass", 2);
__decorateClass$h([
  n2({ attribute: false })
], FooterButtonEditor.prototype, "value", 2);
__decorateClass$h([
  e("ha-yaml-editor")
], FooterButtonEditor.prototype, "_yamlEditor", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_options", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_actionDomain", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_actionName", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_guiSupported", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_error", 2);
__decorateClass$h([
  r()
], FooterButtonEditor.prototype, "_guiMode", 2);
FooterButtonEditor = __decorateClass$h([
  t$1("lc-footer-button-editor")
], FooterButtonEditor);
const styles$f = css`:host {
  display: block;
}

.entities .entity-config {
  margin-top: 8px;
  display: flex;
  align-items: center;
}
.entities .entity-config .handle {
  padding-right: 8px;
  cursor: grab;
  padding-inline-end: 8px;
}
.entities .entity-config .edit-entity {
  flex-grow: 1;
}
.entities .entity-config .divider-entity {
  height: 56px;
  flex-grow: 1;
}
.entities .entity-config .divider-entity .label {
  margin-top: 10px;
  font-size: 11px;
  line-height: 1;
  margin-left: 16px;
  color: var(--secondary-text-color);
}
.entities .entity-config .divider-entity .divider {
  border-color: var(--entities-divider-color, var(--divider-color));
}
.entities .entity-config .action-button {
  --lc-button-size: 36px;
  color: var(--secondary-text-color);
}

.add-entity {
  margin-top: 8px;
  display: block;
  margin-left: 31px;
  margin-right: 71px;
  margin-inline-start: 31px;
  margin-inline-end: 71px;
  direction: var(--direction);
}`;
var __defProp$g = Object.defineProperty;
var __getOwnPropDesc$e = Object.getOwnPropertyDescriptor;
var __decorateClass$g = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$e(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$g(target, key, result);
  return result;
};
let EntitiesEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this.options = [];
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this.options = getEntitiesSelectOptions(this.hass);
  }
  render() {
    if (!this.entities || !this.hass) return html``;
    return html`
      <h3>
        <span>${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.entities")}</span>
      </h3>

      ${this._renderRowsConfigs()}

      <lc-select
        class="add-entity"
        .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.choose_entity")}
        .options=${this.options}
        @value-changed=${this._addEntity}
      ></lc-select>
    `;
  }
  _renderRowsConfigs() {
    if (!this.entities) return html``;
    return html`
      <ha-sortable handle-selector=".handle" @item-moved=${this._rowMoved}>
        <div class="entities">
          ${this.entities.map((entity, index) => this._renderRowConfig(index, entity))}
        </div>
      </ha-sortable>
    `;
  }
  _renderRowConfig(index, entity) {
    return html`
      <div class="entity-config">
        <div class="handle">
          <ha-icon icon="mdi:drag" class="icon"></ha-icon>
        </div>

        ${this._renderEntity(index, entity)}

        <lc-button-circle
          icon="mdi:close"
          .index=${index}
          .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.remove_entity")}
          class="action-button"
          @click=${this._removeRow}
          transparent
        ></lc-button-circle>

        <lc-button-circle
          icon="mdi:pencil"
          .index=${index}
          .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.configure_entity")}
          class="action-button"
          @click=${this._editRow}
          transparent
        ></lc-button-circle>
      </div>

    `;
  }
  _renderEntity(index, entity) {
    var _a, _b;
    if (!("type" in entity)) {
      return html`
        <lc-select
          class="edit-entity"
          .index=${index}
          .label=${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.entity")}
          .options=${this.options}
          .value=${entity.entity}
          .getValue=${(value) => {
        var _a2;
        return ((_a2 = this.hass.entities[value]) == null ? void 0 : _a2.name) || value;
      }}
          @value-changed=${this._changeValue}
        ></lc-select>
      `;
    }
    if (entity.type === "divider") {
      return html`
        <div class="divider-entity">
          <div class="label">${(_b = this.hass) == null ? void 0 : _b.localize("component.advanced_ui_cards.entity_component._.editor.divider")}</div>
          <hr class="divider" />
        </div>
      `;
    }
    return html``;
  }
  _addEntity(event) {
    const value = event.detail.value;
    if (value === "") {
      return;
    }
    const entity = { entity: value };
    event.target.value = "";
    fireEvent(this, "entities-changed", { entities: [...this.entities || [], entity] });
  }
  _editRow(event) {
    const index = event.currentTarget.index;
    fireEvent(this, "edit-detail-element", {
      subElementConfig: {
        index,
        type: "entity",
        elementConfig: this.entities[index]
      }
    });
  }
  _removeRow(event) {
    const index = event.currentTarget.index;
    const entities = this.entities.concat();
    entities.splice(index, 1);
    fireEvent(this, "entities-changed", { entities });
  }
  _changeValue(event) {
    const value = event.detail.value;
    const index = event.target.index;
    const entities = this.entities.concat();
    if (value === "" || value === void 0) {
      entities.splice(index, 1);
    } else {
      entities[index] = {
        ...entities[index],
        entity: value
      };
    }
    fireEvent(this, "entities-changed", { entities });
  }
  _rowMoved(event) {
    event.stopPropagation();
    const { oldIndex, newIndex } = event.detail;
    const entities = this.entities.concat();
    entities.splice(newIndex, 0, entities.splice(oldIndex, 1)[0]);
    fireEvent(this, "entities-changed", { entities });
  }
};
EntitiesEditor.styles = styles$f;
__decorateClass$g([
  n2({ attribute: false })
], EntitiesEditor.prototype, "hass", 2);
__decorateClass$g([
  n2({ attribute: false })
], EntitiesEditor.prototype, "entities", 2);
__decorateClass$g([
  r()
], EntitiesEditor.prototype, "options", 2);
EntitiesEditor = __decorateClass$g([
  t$1("lc-entities-editor")
], EntitiesEditor);
const ActionConfigTypeSchema = object({
  action: enums(["none", "toggle", "url", "navigate", "assist"]),
  confirmation: optional(ConfirmationConfigSchema)
});
const ActionConfigServiceSchema = object({
  action: literal("perform-action"),
  service: optional(string()),
  perform_action: optional(string()),
  service_data: optional(object()),
  data: optional(object()),
  target: optional(TargetConfigSchema),
  confirmation: optional(ConfirmationConfigSchema)
});
const ActionConfigNavigateSchema = object({
  action: literal("navigate"),
  navigation_path: string(),
  navigation_replace: optional(boolean()),
  confirmation: optional(ConfirmationConfigSchema)
});
const ActionConfigUrlSchema = object({
  action: literal("url"),
  url_path: string(),
  confirmation: optional(ConfirmationConfigSchema)
});
const ActionConfigMoreInfoSchema = type({
  action: literal("more-info"),
  entity: optional(string())
});
const ActionConfigSchema = dynamic((value) => {
  if (value && typeof value === "object" && "action" in value) {
    switch (value.action) {
      case "perform-action": {
        return ActionConfigServiceSchema;
      }
      case "navigate": {
        return ActionConfigNavigateSchema;
      }
      case "url": {
        return ActionConfigUrlSchema;
      }
      case "more-info": {
        return ActionConfigMoreInfoSchema;
      }
    }
  }
  return ActionConfigTypeSchema;
});
const FormatEnum = enums(["relative", "total", "date", "time", "datetime"]);
const SecondaryInfoEnum = enums(["last-changed", "entity-id", "last-updated", "last-triggered", "brightness", "tilt-position", "position"]);
const EntityBaseConfigSchema = union([
  object({
    entity: string(),
    name: optional(string()),
    icon: optional(string()),
    image: optional(string()),
    secondary_info: optional(SecondaryInfoEnum),
    format: optional(FormatEnum),
    state_color: optional(boolean()),
    tap_action: optional(ActionConfigSchema),
    hold_action: optional(ActionConfigSchema),
    double_tap_action: optional(ActionConfigSchema),
    confirmation: optional(ConfirmationConfigSchema)
  }),
  string()
]);
const EntityDividerConfigSchema = object({
  type: literal("divider"),
  style: optional(any())
});
const EntitySectionConfigSchema = object({
  type: literal("section"),
  label: optional(string())
});
const EntityWebLinkConfigSchema = object({
  type: literal("weblink"),
  url: string(),
  name: optional(string()),
  icon: optional(string())
});
const EntityAttributeConfigSchema = object({
  type: literal("attribute"),
  entity: string(),
  attribute: string(),
  prefix: optional(string()),
  suffix: optional(string()),
  name: optional(string()),
  icon: optional(string()),
  format: optional(FormatEnum)
});
const EntityTextConfigSchema = object({
  type: literal("text"),
  name: string(),
  text: string(),
  icon: optional(string())
});
const EntityConfigSchema = dynamic((value) => {
  if (value && typeof value === "object" && "type" in value) {
    switch (value.type) {
      case "attribute": {
        return EntityAttributeConfigSchema;
      }
      case "divider": {
        return EntityDividerConfigSchema;
      }
      case "section": {
        return EntitySectionConfigSchema;
      }
      case "text": {
        return EntityTextConfigSchema;
      }
      case "weblink": {
        return EntityWebLinkConfigSchema;
      }
    }
  }
  return EntityBaseConfigSchema;
});
const styles$e = css`.container {
  margin-top: 10px;
  display: grid;
  grid-template-columns: repeat(2, 1fr);
  grid-auto-rows: auto;
  gap: 16px;
}
.container .row-full {
  grid-column: span 2/span 2;
}
.container hr {
  grid-column: span 2/span 2;
  width: 100%;
  border-color: var(--entities-divider-color, var(--divider-color));
}
.container .description {
  font-size: 12px;
  color: var(--secondary-text-color);
  line-height: 1.2;
}
.container .enable-confirm {
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.container .color-radio {
  display: flex;
  align-items: center;
  justify-content: flex-start;
  gap: 10px;
}

.yaml-editor .error {
  margin-top: 8px;
  color: var(--error-color);
  font-size: 13px;
}`;
var __defProp$f = Object.defineProperty;
var __getOwnPropDesc$d = Object.getOwnPropertyDescriptor;
var __decorateClass$f = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$d(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$f(target, key, result);
  return result;
};
let EntityEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this._guiMode = true;
    this._options = [];
  }
  get hasError() {
    return !!this._error;
  }
  get hasWarning() {
    return false;
  }
  get GUImode() {
    return this._guiMode;
  }
  set GUImode(guiMode) {
    this._guiMode = guiMode;
    this.updateComplete.then(() => {
      fireEvent(this, "GUImode-changed", {
        guiMode,
        guiModeAvailable: !(this.hasError || this._guiSupported === false)
      });
    });
  }
  toggleMode() {
    this.GUImode = !this.GUImode;
  }
  focusYamlEditor() {
    var _a;
    (_a = this._yamlEditor) == null ? void 0 : _a.focus();
  }
  render() {
    if (!this.hass || !this.value) return html``;
    if (!this._guiMode) {
      return this._renderYamlEditor();
    }
    return html`
      <div class="container">
        ${"type" in this.value ? this._renderEntityWidthType(this.value) : this._renderBaseEntity(this.value)}
      </div>
    `;
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this._options = getEntitiesSelectOptions(this.hass);
  }
  _renderEntityWidthType(_entity) {
    return html``;
  }
  _renderBaseEntity(entity) {
    var _a;
    if (!this.hass) return html``;
    const domain = computeDomain(entity.entity);
    const secondaryInfoValues = [
      "none",
      "entity-id",
      "last-changed",
      "last-updated",
      ...["automation", "script"].includes(domain) ? ["last-triggered"] : [],
      ...domain === "cover" ? ["position", "tilt-position"] : [],
      ...domain === "light" ? ["brightness"] : []
    ];
    return html`
      <lc-select
        class="row-full"
        .label="${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.entity")} *"
        .value=${entity.entity}
        .options=${this._options}
        .configValue=${"entity"}
        .getValue=${(value) => {
      var _a2;
      return ((_a2 = this.hass.entities[value]) == null ? void 0 : _a2.name) || value;
    }}
        @value-changed=${this._valueChanged}
      ></lc-select>

      <!-- Name -->
      <ha-textfield
        class="input"
        .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.name")}"
        .value=${entity.name || ""}
        .configValue=${"name"}
        @input=${this._valueChanged}
      >
        <slot name="icon" slot="leadingIcon"></slot>
      </ha-textfield>

      <!-- Icon -->
      <ha-selector
        .hass=${this.hass}
        .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.icon")}"
        .value=${entity.icon}
        .required=${false}
        .disabled=${false}
        .configValue=${"icon"}
        .selector=${{ icon: {} }}
        .context=${{ icon_entity: entity.entity }}
        @value-changed=${this._valueChanged}
      ></ha-selector>


      <div class="row-full">
        <ha-selector
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.secondary_information")}
          .selector=${{
      select: {
        mode: "list",
        translation_key: "editor.secondary_info",
        options: secondaryInfoValues
      }
    }}
          .configValue=${"secondary_info"}
          .value=${entity.secondary_info || "none"}
          .localizeValue=${(value) => {
      return this.hass.localize(`component.advanced_ui_cards.entity_component._.${value}`);
    }}
          @value-changed=${this._valueChanged}
        ></ha-selector>
      </div>
    `;
  }
  _renderYamlEditor() {
    return html`
      <div class="yaml-editor">
        <ha-yaml-editor
          .defaultValue=${this.value}
          autofocus
          .hass=${this.hass}
          @value-changed=${this._handleYAMLChanged}
          dir="ltr"
        ></ha-yaml-editor>

        ${this._error ? html`
          <div class="error">${this._error}</div>` : null}
      </div>
    `;
  }
  _handleYAMLChanged(event) {
    event.stopPropagation();
    const config = event.detail.value;
    if (event.detail.isValid) {
      try {
        assert(config, EntityConfigSchema);
        this.value = config;
        this._error = void 0;
        fireEvent(this, "config-changed", { config });
      } catch (e2) {
        this._error = `${e2.message}`.trim();
      }
    } else {
      this._error = `${event.detail.errorMsg}`.trim();
    }
  }
  _valueChanged(event) {
    const configValue = event.target.configValue;
    const value = ["icon", "secondary_info"].includes(configValue) ? event.detail.value : event.target.value;
    const config = {
      ...this.value,
      [configValue]: value
    };
    if (configValue === "secondary_info" && value === "none") {
      Reflect.deleteProperty(config, "secondary_info");
    }
    fireEvent(this, "config-changed", { config });
  }
};
EntityEditor.styles = styles$e;
__decorateClass$f([
  n2({ attribute: false })
], EntityEditor.prototype, "hass", 2);
__decorateClass$f([
  n2({ attribute: false })
], EntityEditor.prototype, "value", 2);
__decorateClass$f([
  e("ha-yaml-editor")
], EntityEditor.prototype, "_yamlEditor", 2);
__decorateClass$f([
  r()
], EntityEditor.prototype, "_guiSupported", 2);
__decorateClass$f([
  r()
], EntityEditor.prototype, "_error", 2);
__decorateClass$f([
  r()
], EntityEditor.prototype, "_guiMode", 2);
__decorateClass$f([
  r()
], EntityEditor.prototype, "_options", 2);
EntityEditor = __decorateClass$f([
  t$1("lc-entity-editor")
], EntityEditor);
const styles$d = css`:host {
  display: block;
}

.gauges .gauge-config {
  margin-top: 8px;
  display: flex;
  align-items: center;
}
.gauges .gauge-config .handle {
  padding-right: 8px;
  cursor: grab;
  padding-inline-end: 8px;
}
.gauges .gauge-config .edit-gauge {
  flex-grow: 1;
}
.gauges .gauge-config .action-button {
  --lc-button-size: 36px;
  color: var(--secondary-text-color);
}

.add-gauge {
  margin-top: 8px;
  display: block;
  margin-left: 31px;
  margin-right: 71px;
  margin-inline-start: 31px;
  margin-inline-end: 71px;
  direction: var(--direction);
}`;
var __defProp$e = Object.defineProperty;
var __getOwnPropDesc$c = Object.getOwnPropertyDescriptor;
var __decorateClass$e = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$c(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$e(target, key, result);
  return result;
};
let GaugesEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this.max = 3;
    this.options = [];
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this.options = getGaugesSelectOptions(this.hass);
  }
  render() {
    if (!this.hass) return html``;
    return html`
      <h3>
        <span>${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.gauges")}</span>
      </h3>
      ${this._renderRows()}
      ${this.gauges && this.gauges.length >= 2 ? null : html`
        <lc-select
          class="add-gauge"
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.choose_entity")}
          .hass=${this.hass}
          .options=${this.options}
          @value-changed=${this._addGauge}
        ></lc-select>
      `}
    `;
  }
  _renderRows() {
    if (!this.gauges || !this.gauges.length) return html``;
    return html`
      <ha-sortable handle-selector=".handle" @item-moved=${this._rowMoved}>
        <div class="gauges">
          ${this.gauges.map((entity, index) => {
      return html`
              <div class="gauge-config">
                <div class="handle">
                  <ha-icon icon="mdi:drag" class="icon"></ha-icon>
                </div>

                ${this._renderGauge(index, entity)}

                <lc-button-circle
                  icon="mdi:close"
                  .index=${index}
                  .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.remove_gauge")}
                  class="action-button"
                  @click=${this._removeGauge}
                  transparent
                ></lc-button-circle>

                <lc-button-circle
                  icon="mdi:pencil"
                  .index=${index}
                  .tooltip=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.configure_gauge")}
                  class="action-button"
                  @click=${this._editGauge}
                  transparent
                ></lc-button-circle>
              </div>
            `;
    })}
        </div>
      </ha-sortable>
    `;
  }
  _renderGauge(index, gauge) {
    var _a;
    return html`
      <lc-select
        class="edit-gauge"
        .index=${index}
        .label=${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.entity")}
        .options=${this.options}
        .value=${gauge.entity}
        .getValue=${(value) => {
      var _a2;
      return ((_a2 = this.hass.entities[value]) == null ? void 0 : _a2.name) || value;
    }}
        @value-changed=${this._changeValue}
      ></lc-select>
    `;
  }
  _addGauge(event) {
    const value = event.detail.value;
    if (value === "" || !(value in this.hass.states)) {
      return;
    }
    const gauge = {
      entity: value
    };
    event.target.value = "";
    fireEvent(this, "gauges-changed", { gauges: [...this.gauges || [], gauge] });
  }
  _editGauge(event) {
    const index = event.currentTarget.index;
    fireEvent(this, "edit-detail-element", {
      subElementConfig: {
        index,
        type: "gauge",
        elementConfig: this.gauges[index]
      }
    });
  }
  _removeGauge(event) {
    const index = event.currentTarget.index;
    const gauges = this.gauges.concat();
    gauges.splice(index, 1);
    fireEvent(this, "gauges-changed", { gauges });
  }
  _changeValue(event) {
    const value = event.detail.value;
    const index = event.target.index;
    const gauges = this.gauges.concat();
    if (value === "" || value === void 0) {
      gauges.splice(index, 1);
    } else {
      gauges[index] = {
        ...gauges[index],
        entity: value
      };
    }
    fireEvent(this, "gauges-changed", { gauges });
  }
  _rowMoved(event) {
    event.stopPropagation();
    const { oldIndex, newIndex } = event.detail;
    const gauges = this.gauges.concat();
    gauges.splice(newIndex, 0, gauges.splice(oldIndex, 1)[0]);
    fireEvent(this, "gauges-changed", { gauges });
  }
};
GaugesEditor.styles = styles$d;
__decorateClass$e([
  n2({ attribute: false })
], GaugesEditor.prototype, "hass", 2);
__decorateClass$e([
  n2()
], GaugesEditor.prototype, "max", 2);
__decorateClass$e([
  n2({ attribute: false })
], GaugesEditor.prototype, "gauges", 2);
__decorateClass$e([
  r()
], GaugesEditor.prototype, "options", 2);
GaugesEditor = __decorateClass$e([
  t$1("lc-gauges-editor")
], GaugesEditor);
const THEME_COLORS_SET = /* @__PURE__ */ new Set([
  "primary",
  "accent",
  "red",
  "pink",
  "purple",
  "deep-purple",
  "indigo",
  "blue",
  "light-blue",
  "cyan",
  "teal",
  "green",
  "light-green",
  "lime",
  "yellow",
  "amber",
  "orange",
  "deep-orange",
  "brown",
  "light-grey",
  "grey",
  "dark-grey",
  "blue-grey",
  "black",
  "white"
]);
const THEME_COLORS = Array.from(THEME_COLORS_SET);
function formatColors(value, defaultColor = "var(--disabled-color)") {
  if (!value) return defaultColor;
  if (THEME_COLORS_SET.has(value)) {
    return `var(--${value}-color)`;
  }
  return value;
}
const styles$c = css`.container {
  margin-top: 10px;
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  grid-auto-rows: auto;
  align-items: center;
  gap: 16px;
}
.container .row-full {
  grid-column: span 6/span 6;
}
.container .row-cell {
  grid-column: span 2/span 6;
}
.container .row-cell-1\\.5x {
  grid-column: span 3/span 6;
}
.container .row-cell-2x {
  grid-column: span 4/span 6;
}
.container .enable-digits {
  margin: 8px 0;
  display: flex;
  align-items: center;
  justify-content: space-between;
}
.container .add-button {
  --mdc-theme-primary: var(--primary-color);
  --mdc-theme-on-primary: var(--primary-text-color) ;
}
.container .level-number {
  --ha-textfield-input-width: 30px !important;
}
.container .level-number ha-selector {
  width: calc(100% - 40px);
}
.container .level-input {
  display: flex;
  align-items: center;
}

.yaml-editor .error {
  margin-top: 8px;
  color: var(--error-color);
  font-size: 13px;
}`;
const GaugeLevelConfigSchema = object({
  level: number(),
  color: string()
});
const GaugeConfigSchema = object({
  entity: string(),
  attribute: optional(string()),
  name: optional(string()),
  unit: optional(string()),
  min: optional(number()),
  max: optional(number()),
  precision: optional(min(integer(), 0)),
  digits: optional(boolean()),
  levels: optional(array(GaugeLevelConfigSchema))
});
function round(value, decimals = 2) {
  const mul = 10 ** decimals;
  return Math.round(value * mul) / mul;
}
function normalize(value, min2, max, decimals = 2) {
  min2 = isNaN(min2) ? 0 : min2;
  max = isNaN(max) ? 100 : max;
  if (min2 > max) {
    throw new Error("MIN_MAX");
  }
  const multiplier = 10 ** decimals;
  value = value == null || isNaN(value) ? 0 : value;
  value = Math.max(value, min2);
  value = Math.min(value, max);
  value = Math.round(value * multiplier) / multiplier;
  return [value, min2, max];
}
function getAngle(value, min2, max) {
  const percent = (value - min2) / (max - min2) * 100;
  return percent * 180 / 100;
}
function toRadians(deg) {
  return deg * Math.PI / 180;
}
function precisionToMinStep(decimals) {
  return 1 / 10 ** decimals;
}
var __defProp$d = Object.defineProperty;
var __getOwnPropDesc$b = Object.getOwnPropertyDescriptor;
var __decorateClass$d = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$b(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$d(target, key, result);
  return result;
};
let GaugeEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this._guiMode = true;
    this._options = [];
  }
  get min() {
    var _a;
    return ((_a = this.value) == null ? void 0 : _a.min) ?? 0;
  }
  get max() {
    var _a;
    return ((_a = this.value) == null ? void 0 : _a.max) ?? 100;
  }
  get precision() {
    var _a;
    return ((_a = this.value) == null ? void 0 : _a.precision) ?? 2;
  }
  get hasError() {
    return !!this._error;
  }
  get hasWarning() {
    return false;
  }
  get GUImode() {
    return this._guiMode;
  }
  set GUImode(guiMode) {
    this._guiMode = guiMode;
    this.updateComplete.then(() => {
      fireEvent(this, "GUImode-changed", {
        guiMode,
        guiModeAvailable: !(this.hasError || this._guiSupported === false)
      });
    });
  }
  toggleMode() {
    this.GUImode = !this.GUImode;
  }
  focusYamlEditor() {
    var _a;
    (_a = this._yamlEditor) == null ? void 0 : _a.focus();
  }
  render() {
    var _a, _b;
    if (!this.hass || !this.value) return html``;
    if (!this._guiMode) {
      return this._renderYamlEditor();
    }
    return html`
      <div class="container">
        <!-- Entity -->
        <lc-select
          class="row-full"
          .value=${this.value.entity}
          .configValue=${"entity"}
          .label=${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.entity")}
          .options=${this._options}
          .getValue=${(value) => {
      var _a2;
      return ((_a2 = this.hass.entities[value]) == null ? void 0 : _a2.name) || value;
    }}
          @value-changed=${this._valueChanged}
        ></lc-select>

        <!-- attribute -->
        ${this._renderAttributeSelect()}

        <!-- Name -->
        <ha-textfield
          class="row-cell-1.5x"
          .hass=${this.hass}
          .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.name")}"
          .value=${this.value.name || ""}
          .configValue=${"name"}
          @input=${this._valueChanged}
        ></ha-textfield>

        <!-- Unit -->
        <ha-textfield
          class="row-cell-1.5x"
          .hass=${this.hass}
          .label="${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.unit")}"
          .value=${this.value.unit || ""}
          .configValue=${"unit"}
          @input=${this._valueChanged}
        ></ha-textfield>

        <!-- Min -->
        <ha-selector
          class="row-cell"
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.min")}
          .value=${this.min}
          .required=${false}
          .configValue=${"min"}
          .selector=${{
      number: {
        max: this.max,
        step: precisionToMinStep(this.precision)
      }
    }}
          .placeholder=${"0"}
          .localize=${this.hass.localize}
          @value-changed=${this._valueChanged}
        ></ha-selector>

        <!-- Max -->
        <ha-selector
          class="row-cell"
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.max")}
          .value=${this.max}
          .required=${false}
          .configValue=${"max"}
          .selector=${{
      number: {
        min: this.min,
        step: precisionToMinStep(this.precision)
      }
    }}
          .placeholder=${"100"}
          .localize=${this.hass.localize}
          @value-changed=${this._valueChanged}
        ></ha-selector>

        <!-- Decimals -->
        <ha-selector
          class="row-cell"
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.precision")}
          .value=${this.precision}
          .required=${false}
          .configValue=${"precision"}
          .selector=${{
      number: {
        min: 0,
        step: 1
      }
    }}
          .placeholder=${"2"}
          .localize=${this.hass.localize}
          @value-changed=${this._valueChanged}
        ></ha-selector>

        <!-- Enable confirmation -->
        <div class="row-full enable-digits">
          <span>${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.show_scale_digits")}</span>

          <lc-switch
            .checked=${!!this.value.digits}
            @change=${this._toggleDigitsSwitch}
          ></lc-switch>
        </div>

        <!-- Levels Configuration -->
        ${(_b = this.value.levels) == null ? void 0 : _b.map((level, index) => this._renderLevelConfig(level, index))}

        <mwc-button
          class="row-full add-button"
          outlined
          @click=${this._addLevel}
        >
          ＋ ${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.add_scale_color")}
        </mwc-button>
      </div>
    `;
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    if (!this.hass) return;
    this._options = getEntitiesSelectOptions(this.hass);
  }
  _renderAttributeSelect() {
    var _a, _b;
    if (!this.value || !this.hass) return html``;
    const stateObj = this.hass.states[this.value.entity];
    const attributes = Object.keys(stateObj.attributes);
    const hideAttributes = Object.keys(stateObj.attributes).filter((attribute) => typeof stateObj.attributes[attribute] !== "number");
    if (attributes.length === hideAttributes.length) return html``;
    return html`
      <ha-selector
        class="row-full"
        .hass=${this.hass}
        .value=${this.value.attribute}
        .label=${(_a = this.hass) == null ? void 0 : _a.localize("component.advanced_ui_cards.entity_component._.editor.input_attribute_label")}
        .helper=${(_b = this.hass) == null ? void 0 : _b.localize("component.advanced_ui_cards.entity_component._.editor.input_attribute_hint")}
        .required=${false}
        .configValue=${"attribute"}
        .selector=${{
      attribute: {
        entity_id: this.value.entity,
        hide_attributes: hideAttributes
      }
    }}
        @value-changed=${this._valueChanged}
      ></ha-selector>
    `;
  }
  _renderLevelConfig(level, index) {
    var _a;
    return html`
      ${index === 0 ? html`
        <div class="row-full">
          ${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.scale_colors_label")}
        </div>` : null}

      <ha-selector
        class="row-cell-2x level-number"
        .index=${index}
        .hass=${this.hass}
        .value=${level.level}
        .required=${true}
        .configValue=${"level"}
        .selector=${{
      number: {
        min: this.min,
        max: this.max,
        step: precisionToMinStep(this.precision),
        mode: "slider",
        slider_ticks: false,
        unit_of_measurement: (_a = this.value) == null ? void 0 : _a.unit
      }
    }}
        .localize=${this.hass.localize}
        @value-changed=${this._updateLevel}
      ></ha-selector>

      <ha-selector
        class="row-cell level-color"
        .index=${index}
        .hass=${this.hass}
        .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.color")}
        .value=${level.color}
        .required=${true}
        .configValue=${"color"}
        .selector=${{ ui_color: {} }}
        .localize=${this.hass.localize}
        @value-changed=${this._updateLevel}
      ></ha-selector>
    `;
  }
  _renderYamlEditor() {
    return html`
      <div class="yaml-editor">
        <ha-yaml-editor
          .defaultValue=${this.value}
          autofocus
          .hass=${this.hass}
          @value-changed=${this._handleYAMLChanged}
          dir="ltr"
        ></ha-yaml-editor>

        ${this._error ? html`
          <div class="error">${this._error}</div>` : null}
      </div>
    `;
  }
  _handleYAMLChanged(event) {
    event.stopPropagation();
    const config = event.detail.value;
    if (event.detail.isValid) {
      try {
        assert(config, GaugeConfigSchema);
        this.value = config;
        this._error = void 0;
        fireEvent(this, "config-changed", { config });
      } catch (e2) {
        this._error = `${e2.message}`.trim();
      }
    } else {
      this._error = `${event.detail.errorMsg}`.trim();
    }
  }
  _toggleDigitsSwitch(event) {
    const config = { ...this.value };
    config.digits = !!event.detail.checked;
    fireEvent(this, "config-changed", { config });
  }
  _updateLevel(event) {
    var _a, _b, _c;
    const index = event.target.index;
    const configValue = event.target.configValue;
    if (((_c = (_b = (_a = this.value) == null ? void 0 : _a.levels) == null ? void 0 : _b[index]) == null ? void 0 : _c[configValue]) === event.detail.value) return;
    const config = { ...this.value };
    if (!event.detail.value && configValue === "color") {
      const levels = [];
      for (let i2 = 0; i2 < config.levels.length; i2++) {
        if (i2 !== index) {
          levels.push({ ...config.levels[i2] });
        }
      }
      config.levels = levels;
    } else {
      config.levels = config.levels.map((level) => ({ ...level }));
      config.levels[index] = {
        ...config.levels[index],
        [configValue]: event.detail.value
      };
    }
    fireEvent(this, "config-changed", { config });
  }
  _addLevel() {
    const config = { ...this.value };
    config.levels = (config.levels || []).map((level2) => ({ ...level2 })).sort((l0, l1) => l0.level - l1.level);
    let level;
    let color;
    if (config.levels.length > 0) {
      const onePercent = (this.max - this.min) / 100;
      const inc = round(onePercent * 10, this.precision);
      const lastLevel = config.levels[config.levels.length - 1].level;
      level = Math.min(lastLevel + inc, this.max);
      color = THEME_COLORS[config.levels.length];
    } else {
      level = this.min;
      color = THEME_COLORS[0];
    }
    config.levels.push({ level, color });
    fireEvent(this, "config-changed", { config });
  }
  _valueChanged(event) {
    const configValue = event.target.configValue;
    const value = ["min", "max", "precision", "attribute"].includes(configValue) ? event.detail.value : event.target.value;
    const config = {
      ...this.value,
      [configValue]: value
    };
    fireEvent(this, "config-changed", { config });
  }
};
GaugeEditor.styles = styles$c;
__decorateClass$d([
  n2({ attribute: false })
], GaugeEditor.prototype, "hass", 2);
__decorateClass$d([
  n2({ attribute: false })
], GaugeEditor.prototype, "value", 2);
__decorateClass$d([
  e("ha-yaml-editor")
], GaugeEditor.prototype, "_yamlEditor", 2);
__decorateClass$d([
  r()
], GaugeEditor.prototype, "_guiSupported", 2);
__decorateClass$d([
  r()
], GaugeEditor.prototype, "_error", 2);
__decorateClass$d([
  r()
], GaugeEditor.prototype, "_guiMode", 2);
__decorateClass$d([
  r()
], GaugeEditor.prototype, "_options", 2);
GaugeEditor = __decorateClass$d([
  t$1("lc-gauge-editor")
], GaugeEditor);
const styles$b = css`.header {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.back-title {
  display: flex;
  align-items: center;
  font-size: 18px;
}`;
var __defProp$c = Object.defineProperty;
var __getOwnPropDesc$a = Object.getOwnPropertyDescriptor;
var __decorateClass$c = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$a(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$c(target, key, result);
  return result;
};
let HuiSubElementEditor = class extends LitElement {
  constructor() {
    super(...arguments);
    this._guiModeAvailable = true;
    this._guiMode = true;
  }
  render() {
    return html`
      ${this._renderHeader()}
      ${this._renderEditor()}
    `;
  }
  _renderHeader() {
    if (!this.hass || !this.config) return html``;
    return html`
      <div class="header">
        <div class="back-title">
          <lc-button-circle
            icon="lc:back"
            .tooltip=${this.hass.localize("ui.common.back")}
            @click=${this._goBack}
            transparent
          ></lc-button-circle>
          ${this._renderTitle()}
        </div>
        <lc-button-circle
          type="button"
          role="button"
          class="gui-mode-button"
          @click=${this._toggleMode}
          .icon=${this._guiMode ? "mdi:code-braces" : "mdi:list-box-outline"}
          .disabled=${!this._guiModeAvailable}
          .tooltip=${this.hass.localize(
      this._guiMode ? "ui.panel.lovelace.editor.edit_card.show_code_editor" : "ui.panel.lovelace.editor.edit_card.show_visual_editor"
    )}
          transparent
        ></lc-button-circle>
      </div>`;
  }
  _renderTitle() {
    if (!this.hass) return html``;
    let title;
    const translateKey = this.config.type.replace(/-/g, "_");
    switch (this.config.type) {
      case "gauge":
        title = this.hass.localize(`component.advanced_ui_cards.entity_component._.editor.gauge_config_caption`);
        break;
      case "footer-button":
        title = this.hass.localize(`component.advanced_ui_cards.entity_component._.editor.button_config_caption`);
        break;
      case "entity":
        const entityType = "type" in this.config.elementConfig ? this.config.elementConfig.type : "entity";
        title = this.hass.localize(`component.advanced_ui_cards.entity_component._.editor.entity_config_caption`, {
          entityType: this.hass.localize(`component.advanced_ui_cards.entity_component._.editor.entity_type_${entityType}`)
        });
        break;
      default:
        title = this.hass.localize(`component.advanced_ui_cards.entity_component._.editor.${translateKey}`);
        break;
    }
    return html`<span slot="title">${title}</span>`;
  }
  _renderEditor() {
    const type2 = this.config.type;
    switch (type2) {
      case "gauge":
        return html`
          <lc-gauge-editor
            class="editor"
            .hass=${this.hass}
            .value=${this.config.elementConfig}
            .context=${this.config.context}
            @config-changed=${this._handleConfigChanged}
            @GUImode-changed=${this._handleGUIModeChanged}
          ></lc-gauge-editor>
        `;
      case "entity":
        return html`
          <lc-entity-editor
            class="editor"
            .hass=${this.hass}
            .value=${this.config.elementConfig}
            .context=${this.config.context}
            @config-changed=${this._handleConfigChanged}
            @GUImode-changed=${this._handleGUIModeChanged}
          ></lc-entity-editor>
        `;
      case "footer-button":
        return html`
          <lc-footer-button-editor
            class="editor"
            .hass=${this.hass}
            .value=${this.config.elementConfig}
            .context=${this.config.context}
            @config-changed=${this._handleConfigChanged}
            @GUImode-changed=${this._handleGUIModeChanged}
          ></lc-footer-button-editor>
        `;
      default:
        return html``;
    }
  }
  _goBack() {
    fireEvent(this, "go-back");
  }
  _toggleMode() {
    var _a;
    (_a = this._editorElement) == null ? void 0 : _a.toggleMode();
  }
  _handleGUIModeChanged(ev) {
    ev.stopPropagation();
    this._guiMode = ev.detail.guiMode;
    this._guiModeAvailable = ev.detail.guiModeAvailable;
  }
  _handleConfigChanged(ev) {
    this.config.elementConfig = ev.detail.config;
  }
};
HuiSubElementEditor.styles = styles$b;
__decorateClass$c([
  n2({ attribute: false })
], HuiSubElementEditor.prototype, "hass", 2);
__decorateClass$c([
  n2({ attribute: false })
], HuiSubElementEditor.prototype, "config", 2);
__decorateClass$c([
  r()
], HuiSubElementEditor.prototype, "_guiModeAvailable", 2);
__decorateClass$c([
  r()
], HuiSubElementEditor.prototype, "_guiMode", 2);
__decorateClass$c([
  e(".editor")
], HuiSubElementEditor.prototype, "_editorElement", 2);
HuiSubElementEditor = __decorateClass$c([
  t$1("lc-sub-element-editor")
], HuiSubElementEditor);
const styles$a = css`:host {
  --lc-dropdown-item-height: 72px;
  --lc-dropdown-items-count: 5;
  --lc-dropdown-width: 300px;
  --lc-dropdown-top: 0;
  --lc-dropdown-left: 0;
  --lc-dropdown-border-radius: 0;
}

.dropdown {
  top: var(--lc-dropdown-top);
  left: var(--lc-dropdown-left);
  width: var(--lc-dropdown-width);
  height: var(--lc-dropdown-height);
  max-height: var(--lc-dropdown-height);
  background-color: var(--material-background-color);
  border-radius: var(--lc-dropdown-border-radius);
  box-shadow: 0 4px 5px 0 rgba(0, 0, 0, 0.14), 0 1px 10px 0 rgba(0, 0, 0, 0.12), 0 2px 4px -1px rgba(0, 0, 0, 0.4);
  overflow: hidden;
  position: fixed;
  z-index: 99999;
}

.scroller {
  width: 100%;
  height: 100%;
  overflow-y: auto;
  display: block;
}

.list-items {
  padding-left: 0;
  margin: 0;
}`;
const styles$9 = css`:host {
  height: var(--lc-dropdown-item-height);
  width: auto;
  padding: 0 16px;
  cursor: pointer;
  color: var(--primary-text-color);
  user-select: none;
  -webkit-tap-highlight-color: transparent;
  scroll-snap-align: start end;
  display: flex;
  align-items: center;
  justify-content: flex-start;
  overflow: hidden;
  transition: background-color 0.2s ease-out;
  outline: 0;
}

:host(:hover) {
  background-color: var(--material-secondary-background-color);
}

:host([selected]) {
  color: var(--primary-color);
  background-color: color-mix(in srgb, var(--primary-color) 10%, transparent 90%);
}

.icon {
  --mdc-icon-size: 24px;
  --icon-primary-color: var(--secondary-text-color);
  width: 40px;
  height: 40px;
  display: flex;
  align-items: center;
  justify-content: center;
}

.info {
  margin-left: 16px;
}
.info .label {
  font-size: 14px;
}
.info .text {
  margin-top: 6px;
  font-size: 12px;
  color: var(--secondary-text-color);
}`;
var __defProp$b = Object.defineProperty;
var __getOwnPropDesc$9 = Object.getOwnPropertyDescriptor;
var __decorateClass$b = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$9(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$b(target, key, result);
  return result;
};
let SelectOption = class extends LitElement {
  constructor() {
    super(...arguments);
    this.selected = false;
  }
  render() {
    return html`
      ${this._renderIcon()}
      <div class="info">
        <div class="label">${this.label || this.value}</div>
        ${this.secondLabel ? html`<div class="text">${this.secondLabel}</div>` : null}
        </div>
      </div>
    `;
  }
  _renderIcon() {
    if (!this.icon) return html``;
    if (typeof this.icon === "string") {
      return html`
        <div class="icon">
          <ha-icon .icon=${this.icon}></ha-icon>
        </div>
      `;
    }
    return this.icon;
  }
};
SelectOption.styles = styles$9;
__decorateClass$b([
  n2()
], SelectOption.prototype, "value", 2);
__decorateClass$b([
  n2({ attribute: false })
], SelectOption.prototype, "icon", 2);
__decorateClass$b([
  n2({ attribute: "selected", reflect: true, type: Boolean })
], SelectOption.prototype, "selected", 2);
__decorateClass$b([
  n2()
], SelectOption.prototype, "label", 2);
__decorateClass$b([
  n2()
], SelectOption.prototype, "secondLabel", 2);
SelectOption = __decorateClass$b([
  t$1("lc-select-option")
], SelectOption);
var __defProp$a = Object.defineProperty;
var __getOwnPropDesc$8 = Object.getOwnPropertyDescriptor;
var __decorateClass$a = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$8(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$a(target, key, result);
  return result;
};
let SelectDropdown = class extends LitElement {
  constructor() {
    super(...arguments);
    this.options = [];
    this.inert = false;
  }
  firstUpdated(_changed) {
    super.firstUpdated(_changed);
    requestAnimationFrame(() => {
      const selected = this.shadowRoot.querySelector("[selected]");
      if (selected && "scrollIntoView" in selected) {
        selected.scrollIntoView(true);
      }
    });
  }
  render() {
    if (!this.options) return html``;
    return html`
      <div class="dropdown" @click=${(event) => event.stopPropagation()} @wheel=${(event) => event.stopPropagation()}>
        <div class="scroller">
          <ul class="list-items">
            ${this.options.map((option) => this._renderOption(option))}
          </ul>
        </div>
      </div>
    `;
  }
  _renderOption(item) {
    return html`
      <lc-select-option
        .value=${item.value}
        .selected=${this.value != null && item.value === this.value}
        .icon=${item.icon}
        .label=${item.label}
        .secondLabel=${item.secondLabel}
        @click=${this._onClick}
      ></lc-select-option>
    `;
  }
  _onClick(event) {
    event.stopPropagation();
    fireEvent(this, "value-changed", { value: event.target.value });
  }
};
SelectDropdown.styles = styles$a;
__decorateClass$a([
  n2({ attribute: false })
], SelectDropdown.prototype, "options", 2);
__decorateClass$a([
  n2()
], SelectDropdown.prototype, "value", 2);
__decorateClass$a([
  n2({ attribute: "inert", type: Boolean })
], SelectDropdown.prototype, "inert", 2);
SelectDropdown = __decorateClass$a([
  t$1("lc-select-dropdown")
], SelectDropdown);
function getElementRect(element) {
  const rect = element.getBoundingClientRect();
  if (!rect) {
    throw new Error("No possible compute rect");
  }
  return {
    x: rect.x,
    y: rect.y,
    width: rect.width,
    height: rect.height
  };
}
const styles$8 = css`:host {
  display: block;
}

:host([opened]) .select .toggle-button {
  color: var(--primary-color);
}

.select {
  position: relative;
}
.select .input {
  width: 100%;
}
.select .toggle-button {
  right: 1rem;
  top: 1rem;
  position: absolute;
  color: var(--input-dropdown-icon-color);
}`;
var __defProp$9 = Object.defineProperty;
var __getOwnPropDesc$7 = Object.getOwnPropertyDescriptor;
var __decorateClass$9 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$7(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$9(target, key, result);
  return result;
};
const LIST_ITEM_HEIGHT = 72;
const LIST_MAX_DISPLAY = 5;
let Select = class extends LitElement {
  constructor() {
    super(...arguments);
    this.disabled = false;
    this.opened = false;
    this._search = "";
    this._focused = false;
    this._callbacks = {};
  }
  willUpdate(_changed) {
    var _a;
    super.willUpdate(_changed);
    if (_changed.has("required") || _changed.has("value")) ;
    if (_changed.has("_search") && this._dropdown && this.options) {
      const search = ((_a = this._search) == null ? void 0 : _a.trim().toLowerCase()) || "";
      if (search) {
        this._dropdown.options = this.options.filter((item) => {
          return item.value.toLowerCase().includes(search) || item.label && item.label.toLowerCase().includes(search);
        });
      } else {
        this._dropdown.options = this.options;
      }
      this._positioning();
    }
  }
  render() {
    if (!this.options) return html``;
    return html`
      <div class="select" @click=${(event) => event.stopPropagation()}>
        <ha-textfield
          class="input"
          .label=${this.label}
          .value=${this._focused ? this._search : this._getSelectedValue()}
          .errorMessage=${this.errorMessage}
          .invalid=${!!this.errorMessage}
          .helper=${this.helper}
          helperPersistent
          @input=${this._onInput}
          @focus=${this._onFocus}
          @blur=${this._onBlur}
        ></ha-textfield>

        <ha-icon
          role="button"
          tabindex="-1"
          aria-expanded=${this.opened ? "true" : "false"}
          class="toggle-button"
          .icon=${this.opened ? "mdi:menu-up" : "mdi:menu-down"}
          ?disabled=${this.disabled}
        ></ha-icon>
      </div>
    `;
  }
  updated(_changed) {
    super.updated(_changed);
    if (_changed.has("opened")) {
      if (this.opened) {
        this._showDropdown();
      } else {
        this._hideDropdown();
      }
    }
  }
  _showDropdown() {
    if (this._dropdown) {
      this._hideDropdown();
    }
    this._dropdown = document.createElement("lc-select-dropdown");
    this._dropdown.options = this.options;
    this._dropdown.value = this.value;
    this._dropdown.addEventListener("value-changed", this._onValueChanged.bind(this));
    document.body.append(this._dropdown);
    this._callbacks["wheel"] = this._onWheel.bind(this);
    window.addEventListener("wheel", this._callbacks["wheel"]);
    requestAnimationFrame(() => {
      this._callbacks["window-click"] = () => this.opened = false;
      window.addEventListener("click", this._callbacks["window-click"]);
      this._positioning();
    });
  }
  _hideDropdown() {
    var _a;
    window.removeEventListener("wheel", this._callbacks["wheel"]);
    Reflect.deleteProperty(this._callbacks, "wheel");
    window.removeEventListener("click", this._callbacks["window-click"]);
    Reflect.deleteProperty(this._callbacks, "window-click");
    (_a = this._dropdown) == null ? void 0 : _a.remove();
    this._dropdown = void 0;
  }
  _positioning() {
    var _a;
    if (!this._dropdown) {
      throw new Error("");
    }
    const { x, y: y2, width, height } = getElementRect(this);
    const windowHeight = ((_a = window.visualViewport) == null ? void 0 : _a.height) || window.innerHeight;
    const dropdownHeight = LIST_ITEM_HEIGHT * Math.min(LIST_MAX_DISPLAY, this._dropdown.options.length);
    const isBellow = windowHeight < y2 + height + dropdownHeight;
    const top2 = isBellow ? y2 - dropdownHeight : y2 + height;
    this._dropdown.style.setProperty("--lc-dropdown-top", `${top2}px`);
    this._dropdown.style.setProperty("--lc-dropdown-left", `${x}px`);
    this._dropdown.style.setProperty("--lc-dropdown-width", `${width}px`);
    this._dropdown.style.setProperty("--lc-dropdown-height", `${dropdownHeight}px`);
    this._dropdown.style.setProperty("--lc-dropdown-border-radius", isBellow ? ".5rem .5rem 0 0" : "0 0 .5rem .5rem");
    return {
      top: top2,
      left: x,
      width,
      isBellow
    };
  }
  _onBlur(event) {
    event.stopPropagation();
    this._focused = false;
  }
  _onFocus(event) {
    event.stopPropagation();
    this._search = this._getSelectedValue();
    this._focused = true;
    this.opened = true;
    requestAnimationFrame(() => {
      var _a;
      (_a = this._input) == null ? void 0 : _a.setSelectionRange(0, this._search.length, "forward");
    });
  }
  _onInput(event) {
    this._search = event.target.value;
  }
  _onWheel() {
    let left;
    let top2;
    const tryPosition = () => {
      const result = this._positioning();
      if (!result) return;
      if (left !== result.left || top2 !== result.top) {
        left = result.left;
        top2 = result.top;
        requestAnimationFrame(tryPosition);
      }
    };
    requestAnimationFrame(tryPosition);
  }
  _getSelectedValue() {
    if (!this.value) return "";
    return this.getValue ? this.getValue(this.value) : this.value;
  }
  _onValueChanged(event) {
    this.value = event.detail.value;
    this._search = "";
    this.opened = false;
    fireEvent(this, "value-changed", { value: this.value });
  }
};
Select.styles = styles$8;
__decorateClass$9([
  n2()
], Select.prototype, "label", 2);
__decorateClass$9([
  n2({ attribute: "value", reflect: true, type: String })
], Select.prototype, "value", 2);
__decorateClass$9([
  n2()
], Select.prototype, "options", 2);
__decorateClass$9([
  n2()
], Select.prototype, "helper", 2);
__decorateClass$9([
  n2({ attribute: "error-message", type: String })
], Select.prototype, "errorMessage", 2);
__decorateClass$9([
  n2({ attribute: "disabled", type: Boolean, reflect: true })
], Select.prototype, "disabled", 2);
__decorateClass$9([
  n2({ attribute: "opened", type: Boolean, reflect: true })
], Select.prototype, "opened", 2);
__decorateClass$9([
  n2({ attribute: false })
], Select.prototype, "getValue", 2);
__decorateClass$9([
  r()
], Select.prototype, "_search", 2);
__decorateClass$9([
  r()
], Select.prototype, "_focused", 2);
__decorateClass$9([
  e(".input")
], Select.prototype, "_input", 2);
Select = __decorateClass$9([
  t$1("lc-select")
], Select);
const styles$7 = css`:host {
  --lc-button-size: 40px;
  --lc-button-icon-size: 24px;
  --lc-button-color: currentColor;
  --lc-button-bg-opacity: 0.15;
  width: var(--lc-button-size);
  height: var(--lc-button-size);
  color: var(--lc-button-color);
  font-family: var(--paper-font-body1_-_font-family);
  -webkit-font-smoothing: var(--paper-font-body1_-_-webkit-font-smoothing);
  font-size: var(--paper-font-body1_-_font-size);
  font-weight: var(--paper-font-body1_-_font-weight);
  line-height: var(--paper-font-body1_-_line-height);
  display: inline-block;
  position: relative;
}
:host:before {
  content: " ";
  left: 0;
  right: 0;
  width: var(--lc-button-size);
  height: var(--lc-button-size);
  border-radius: 50%;
  background-color: currentcolor;
  opacity: var(--lc-button-bg-opacity);
  position: absolute;
}

.lc-button-circle-icon {
  --ha-icon-display: block;
  --mdc-icon-button-size: var(--lc-button-size);
  --mdc-icon-size: var(--lc-button-icon-size);
  --mdc-theme-primary: var(--lc-button-color);
  color: var(--lc-button-color);
}

.lc-button-circle-spinner {
  width: var(--lc-button-size);
  height: var(--lc-button-size);
  border-radius: 50%;
  font-size: var(--lc-button-icon-size);
}`;
var __defProp$8 = Object.defineProperty;
var __getOwnPropDesc$6 = Object.getOwnPropertyDescriptor;
var __decorateClass$8 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$6(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$8(target, key, result);
  return result;
};
function createComponent(Base) {
  const _ButtonCircle = class _ButtonCircle extends Base {
    constructor(...rest) {
      super(...rest);
      this.icon = "mdi:gesture-tap-button";
      this.disabled = false;
      this._popoverOff = false;
    }
    set color(value) {
      this.style.setProperty("--lc-button-color", formatColors(value, "currentColor"));
    }
    set transparent(value) {
      this.style.setProperty("--lc-button-bg-opacity", value ? "0" : "0.15");
    }
    render() {
      return html`
        <mwc-icon-button
          type="button"
          role="button"
          class="lc-button-circle-icon"
          .disabled=${this.disabled}
          @mouseenter="${this._onMouseenter}"
          @mouseleave="${this._onMouseLeave}"
          @click=${this._onClick}
        >
          ${this._renderIcon()}
        </mwc-icon-button>
      `;
    }
    _renderIcon() {
      if (this.disabled || !this.status) {
        return html`<ha-icon icon=${this.icon} class="icon"></ha-icon>`;
      }
      switch (this.status) {
        case "loading":
          return html`<lc-icon-spinner color="var(--lc-button-color)"></lc-icon-spinner>`;
        case "success":
          return html`<lc-icon-success color="var(--lc-button-color)"></lc-icon-success>`;
        case "error":
          return html`<lc-icon-error color="var(--lc-button-color)"></lc-icon-error>`;
      }
    }
    _removePopover() {
      if (this._popover) {
        this._popover.hide();
        this._popover = void 0;
      }
    }
    _onClick() {
      this._popoverOff = true;
      this._removePopover();
    }
    /**
     * Show tooltip popover
     * @private
     */
    _onMouseenter() {
      if (this._popoverOff || !this.tooltip || this.status) return;
      this._popover = document.createElement("lc-popover");
      this._popover.attach(this, this.tooltip);
    }
    /**
     * Hide tooltip popover
     * @private
     */
    _onMouseLeave() {
      this._removePopover();
      this._popoverOff = false;
    }
  };
  _ButtonCircle.styles = styles$7;
  let ButtonCircle = _ButtonCircle;
  __decorateClass$8([
    n2({ attribute: true })
  ], ButtonCircle.prototype, "icon", 2);
  __decorateClass$8([
    n2({ attribute: "color", reflect: true, type: String })
  ], ButtonCircle.prototype, "color", 1);
  __decorateClass$8([
    n2({ attribute: true })
  ], ButtonCircle.prototype, "tooltip", 2);
  __decorateClass$8([
    n2({ attribute: "status", reflect: true, type: String })
  ], ButtonCircle.prototype, "status", 2);
  __decorateClass$8([
    n2({ attribute: "disabled", reflect: true, type: Boolean })
  ], ButtonCircle.prototype, "disabled", 2);
  __decorateClass$8([
    n2({ attribute: "transparent", reflect: true, type: Boolean })
  ], ButtonCircle.prototype, "transparent", 1);
  return ButtonCircle;
}
(async () => {
  await customElements.whenDefined("ha-icon");
  const source = await customElements.whenDefined("mwc-icon-button");
  customElements.define("lc-button-circle", createComponent(source), { extends: "button" });
})();
function forwardHaptic(hapticType) {
  fireEvent(window, "haptic", hapticType);
}
function domainToName(localize, domain, manifest) {
  return localize(`component.${domain}.title`) || (manifest == null ? void 0 : manifest.name) || domain;
}
const MAIN_WINDOW_NAME = "ha-main-window";
const mainWindow = (() => {
  try {
    return window.name === MAIN_WINDOW_NAME ? window : parent.name === MAIN_WINDOW_NAME ? parent : top;
  } catch {
    return window;
  }
})();
function isShowConfirmation(confirmation, userId) {
  if (!confirmation) return false;
  if (confirmation === true) return true;
  return !confirmation.exemptions || !confirmation.exemptions.some((e2) => e2.user === userId);
}
const style = css`.footer {
  margin-top: 0;
}
.footer .divider {
  margin: 0;
  border: none;
  border-bottom-width: 1px;
  border-bottom-style: solid;
  border-bottom-color: var(--divider-color);
}
.footer .buttons {
  width: auto;
  padding: var(--padding-top, 10px) 12px var(--padding-bottom, 10px);
  box-sizing: border-box;
  display: flex;
  flex-wrap: nowrap;
  align-items: center;
  justify-content: flex-end;
}
.footer .buttons .btn-wrap {
  padding: 0 6px;
}`;
var __defProp$7 = Object.defineProperty;
var __getOwnPropDesc$5 = Object.getOwnPropertyDescriptor;
var __decorateClass$7 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$5(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$7(target, key, result);
  return result;
};
let FooterButtons = class extends LitElement {
  constructor() {
    super(...arguments);
    this._statuses = [];
    this._animationTimer = [];
  }
  render() {
    var _a;
    if (!((_a = this.buttons) == null ? void 0 : _a.length)) {
      return html``;
    }
    return html`
      <div class="footer">
        <hr class="divider" role="separator" />

        <div class="buttons">
          ${this.buttons.map((config, index) => this._renderButton(index, config))}
        </div>
      </div>
    `;
  }
  _renderButton(index, config) {
    if (!config) {
      return html``;
    }
    return html`
      <div class="btn-wrap">
        <lc-button-circle
          data-index=${index}
          color=${config.color}
          icon=${config.icon}
          tooltip=${config.tooltip}
          .status=${this._statuses[index]}
          @click=${this._onClick}
        ></lc-button-circle>
      </div>
    `;
  }
  async _onClick(event) {
    event.stopPropagation();
    const element = event.target;
    const index = parseInt(element.dataset.index);
    if (this._animationTimer[index]) {
      clearTimeout(this._animationTimer[index]);
      this._animationTimer[index] = void 0;
    }
    if (this._statuses[index] === "loading") {
      return;
    }
    this._setButtonStatus(index, "loading");
    const config = this.buttons[index];
    if (await this._isConfirmed(config)) {
      this._setButtonStatus(index, void 0);
      return;
    }
    const [domain, service] = config.action.split(".", 2);
    const begin = Date.now();
    try {
      await this.hass.callService(domain, service, config.data, config.target);
      const delay = Date.now() - begin;
      if (delay > 600) {
        this._setCallResult(index, "success")();
      } else {
        this._animationTimer[index] = setTimeout(this._setCallResult(index, "success"), 600 - delay);
      }
    } catch {
      this._setCallResult(index, "error")();
    }
  }
  async _isConfirmed(config) {
    var _a;
    if (!isShowConfirmation(config.confirmation, (_a = this.hass.user) == null ? void 0 : _a.id)) return false;
    forwardHaptic("warning");
    let text = "";
    if (typeof config.confirmation !== "boolean" && config.confirmation.text) {
      text = config.confirmation.text;
    } else {
      const [domain, service] = config.action.split(".", 2);
      const serviceDomains = this.hass.services;
      let serviceName = "";
      if (domain in serviceDomains && service in serviceDomains[domain]) {
        await this.hass.loadBackendTranslation("title");
        const localize = await this.hass.loadBackendTranslation("entity");
        serviceName += domainToName(localize, domain);
        serviceName += ": ";
        serviceName += localize(`component.${domain}.services.${serviceName}.name`) || serviceDomains[domain][service].name || service;
      }
      text = this.hass.localize("ui.panel.lovelace.cards.actions.action_confirmation", {
        action: serviceName || this.hass.localize(`ui.panel.lovelace.editor.action-editor.actions.${config.action}`) || config.action
      });
    }
    const utils = await mainWindow.loadCardHelpers();
    return !await utils.showConfirmationDialog(this, { text, title: config.tooltip });
  }
  _setButtonStatus(index, status) {
    this._statuses[index] = status;
    this._statuses = [...this._statuses];
  }
  _setCallResult(index, status) {
    return () => {
      forwardHaptic("light");
      this._setButtonStatus(index, status);
      this._animationTimer[index] = setTimeout(() => {
        this._setButtonStatus(index, void 0);
      }, 2500);
    };
  }
};
FooterButtons.styles = style;
__decorateClass$7([
  n2({ attribute: false })
], FooterButtons.prototype, "hass", 2);
__decorateClass$7([
  n2({ attribute: false })
], FooterButtons.prototype, "buttons", 2);
__decorateClass$7([
  r()
], FooterButtons.prototype, "_statuses", 2);
FooterButtons = __decorateClass$7([
  t$1("lc-footer-buttons")
], FooterButtons);
const styles$6 = css`:host {
  --lc-popover-y: 0px;
  --lc-popover-x: 0px;
  --lc-popover-width: auto;
  --lc-popover-height: auto;
  --lc-popover-arrow-position: 0px;
  --lc-popover-arrow-left: 0px;
  --lc-popover-background-color: var(--card-background-color);
  --lc-popover-text-color: var(--primary-text-color);
  --lc-popover-border-color: var(--divider-color);
  --lc-popover-border-radius: .4rem;
  --lc-popover-padding: .5rem .75rem;
  --lc-popover-arrow-size: 8px;
  --lc-popover-offset: 2px;
  --lc-popover-transform-x: 0;
  --lc-popover-transform-y: 0;
  --lc-popover-transform-scale: .7;
  top: var(--lc-popover-y);
  left: var(--lc-popover-x);
  width: var(--lc-popover-width);
  height: var(--lc-popover-height);
  max-width: 280px;
  display: block;
  position: absolute;
  box-sizing: border-box;
  z-index: 999999;
}

.popover {
  width: 100%;
  height: 100%;
  margin: 0;
  padding: var(--lc-popover-padding);
  opacity: 0;
  transition: opacity 0.2s ease-out, transform 0.15s ease-out;
  box-shadow: var(--mui-shadows-8, 0px 5px 5px -3px rgba(0, 0, 0, 0.2), 0px 8px 10px 1px rgba(0, 0, 0, 0.14), 0px 3px 14px 2px rgba(0, 0, 0, 0.12));
  background-color: var(--lc-popover-background-color);
  color: var(--lc-popover-text-color);
  border-radius: var(--lc-popover-border-radius);
  border: 1px solid var(--lc-popover-border-color);
  text-align: center;
  pointer-events: none;
  box-sizing: border-box;
  z-index: 9999;
  /* TOP */
  /* BOTTOM */
  /* LEFT */
  /* RIGHT */
}
.popover .text {
  font-size: 0.825rem;
  letter-spacing: 0.3px;
  line-height: 1.3;
  text-rendering: geometricPrecision;
}
.popover .arrow {
  border: var(--lc-popover-arrow-size) solid transparent;
  height: 0;
  width: 0;
  display: block;
  position: absolute;
}
.popover.popover-top {
  transform: translate(0, 6px) scale(0.7);
}
.popover.popover-top .arrow {
  bottom: calc(var(--lc-popover-arrow-size) * -2);
  left: var(--lc-popover-arrow-position);
  border-top-color: var(--lc-popover-background-color);
  filter: drop-shadow(0 1px var(--lc-popover-border-color));
}
.popover.popover-bottom {
  transform: translate(0, -6px) scale(0.7);
}
.popover.popover-bottom .arrow {
  top: calc(var(--lc-popover-arrow-size) * -2);
  left: var(--lc-popover-arrow-position);
  border-bottom-color: var(--lc-popover-background-color);
  filter: drop-shadow(0 -1px var(--lc-popover-border-color));
}
.popover.popover-left {
  transform: translate(6px, 0) scale(0.7);
}
.popover.popover-left .arrow {
  top: var(--lc-popover-arrow-position);
  right: calc(var(--lc-popover-arrow-size) * -2);
  border-left-color: var(--lc-popover-background-color);
  filter: drop-shadow(1px 0 var(--lc-popover-border-color));
}
.popover.popover-right {
  transform: translate(-6px, 0) scale(0.7);
}
.popover.popover-right .arrow {
  top: var(--lc-popover-arrow-position);
  left: calc(var(--lc-popover-arrow-size) * -2);
  border-right-color: var(--lc-popover-background-color);
  filter: drop-shadow(-1px 0 var(--lc-popover-border-color));
}
.popover.show.in {
  transform: translate(0, 0) scale(1);
  opacity: 1;
}
.popover.show.in.out {
  opacity: 0;
}`;
var __defProp$6 = Object.defineProperty;
var __decorateClass$6 = (decorators, target, key, kind) => {
  var result = void 0;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = decorator(target, key, result) || result;
  if (result) __defProp$6(target, key, result);
  return result;
};
const _Popover = class _Popover extends LitElement {
  constructor() {
    super();
    this._hiddenInProcess = false;
    this.placement = "top";
    this.arrow = 8;
    this.offset = 2;
    this.maxWidth = 280;
  }
  hide() {
    if (this._hiddenInProcess) return;
    this._hiddenInProcess = true;
    const popup = this.shadowRoot.firstElementChild;
    popup.classList.add("out");
    setTimeout(() => {
      this._reference = void 0;
      this.remove();
    }, 200);
  }
  attach(element, content, opts) {
    this._reference = element;
    this.content = content;
    if (opts == null ? void 0 : opts.offset) {
      this.offset = opts.offset;
    }
    if (opts == null ? void 0 : opts.placement) {
      this.placement = opts.placement;
    }
    if (opts == null ? void 0 : opts.maxWidth) {
      this.maxWidth = opts.maxWidth;
    }
    document.body.append(this);
  }
  connectedCallback() {
    super.connectedCallback();
    const elements = document.getElementsByTagName("lc-popover");
    for (const popover of elements) {
      if (popover !== this) {
        popover.hide();
      }
    }
  }
  updated() {
    this._computePosition();
  }
  render() {
    return html`
      <div class="popover">
        <div class="text">${this.content}</div>
        <div class="arrow" />
      </div>
    `;
  }
  _computePosition() {
    var _a, _b;
    const sizeMin = (this.offset + this.arrow) * 2;
    let y2;
    let x;
    let height = Math.ceil(this.offsetHeight) + 1;
    let width = Math.ceil(this.offsetWidth) + 1;
    let arrowPosition;
    let placement = this.placement;
    height = Math.max(height, sizeMin);
    width = Math.min(Math.max(width, sizeMin), this.maxWidth);
    const _rect = getElementRect(this._reference);
    const rect = { ..._rect, x: _rect.x + window.scrollX, y: _rect.y + window.scrollY };
    const windowWidth = ((_a = window.visualViewport) == null ? void 0 : _a.width) || window.innerWidth;
    const windowHeight = ((_b = window.visualViewport) == null ? void 0 : _b.height) || window.innerHeight;
    const popover = this.shadowRoot.firstElementChild;
    const xMin = this.offset;
    const xMax = windowWidth - width - this.offset;
    const yMin = this.offset;
    const yMax = windowHeight - height - this.offset;
    switch (placement) {
      case "top":
        y2 = Math.round(rect.y - height - this.arrow - this.offset);
        x = Math.round(rect.x + rect.width / 2 - width / 2);
        if (y2 < yMin) {
          y2 = Math.round(rect.y + rect.height + this.arrow + this.offset);
          placement = "bottom";
        }
        x = Math.max(Math.min(x, xMax), xMin);
        break;
      case "bottom":
        y2 = Math.round(rect.y + rect.height + this.arrow + this.offset);
        x = Math.round(rect.x + rect.width / 2 - width / 2);
        if (y2 > yMax) {
          y2 = Math.round(rect.y - height - this.arrow - this.offset);
          placement = "top";
        }
        x = Math.max(Math.min(x, xMax), xMin);
        break;
      case "left":
        y2 = Math.round(rect.y + rect.height / 2 - height / 2);
        x = Math.round(rect.x - width - this.arrow - this.offset);
        if (x < xMin) {
          x = Math.round(rect.x + rect.width + this.arrow + this.offset);
          placement = "right";
        }
        y2 = Math.max(Math.min(y2, yMax), yMin);
        break;
      case "right":
        y2 = Math.round(rect.y + rect.height / 2 - height / 2);
        x = Math.round(rect.x + rect.width + this.arrow + this.offset);
        if (x > xMax) {
          x = Math.round(rect.x - width - this.arrow - this.offset);
          placement = "left";
        }
        y2 = Math.max(Math.min(y2, yMax), yMin);
        break;
    }
    if (placement === "top" || placement === "bottom") {
      arrowPosition = rect.x - x + rect.width / 2 - this.arrow;
    } else {
      arrowPosition = rect.y - y2 + rect.height / 2 - this.arrow;
    }
    for (const className of popover.classList.values()) {
      if (/^popover-(:?top|bottom|left|right)$/.test(className)) {
        popover.classList.remove(className);
      }
    }
    popover.classList.add(`popover-${placement}`);
    this.style.setProperty("--lc-popover-arrow-position", `${arrowPosition}px`);
    this.style.setProperty("--lc-popover-arrow-size", `${this.arrow}px`);
    this.style.setProperty("--lc-popover-offset", `${this.offset}px`);
    this.style.setProperty("--lc-popover-y", `${y2}px`);
    this.style.setProperty("--lc-popover-x", `${x}px`);
    this.style.setProperty("--lc-popover-height", `${height}px`);
    this.style.setProperty("--lc-popover-width", `${width}px`);
    setTimeout(() => popover.classList.add("show", "in"), 100);
  }
};
_Popover.styles = styles$6;
let Popover = _Popover;
__decorateClass$6([
  n2()
], Popover.prototype, "content");
__decorateClass$6([
  n2({ attribute: "placement", reflect: true })
], Popover.prototype, "placement");
__decorateClass$6([
  n2()
], Popover.prototype, "arrow");
__decorateClass$6([
  n2()
], Popover.prototype, "offset");
__decorateClass$6([
  n2({ attribute: "max-width" })
], Popover.prototype, "maxWidth");
customElements.define("lc-popover", Popover, { extends: "div" });
const styles$5 = css`:host {
  --gauge-needle-position: 0deg;
  display: block;
}
:host .lc-gauge {
  width: 100%;
  height: auto;
}
:host .lc-gauge .dial-plate {
  stroke: rgb(0, 0, 0);
  stroke-width: 0;
  stroke-linejoin: round;
}
:host .lc-gauge .scale {
  font-weight: 400;
  font-size: 5px;
  font-family: Roboto, Noto, sans-serif;
  fill: var(--secondary-text-color);
}
:host .lc-gauge .pointer {
  transform: rotate(var(--gauge-needle-position));
}
:host .lc-gauge .pointer path {
  fill: var(--primary-text-color);
}
:host .lc-gauge .value {
  font-weight: 400;
  font-family: Roboto, Noto, sans-serif;
  letter-spacing: -0.5px;
  fill: var(--primary-text-color);
}
:host .lc-gauge .label {
  font-size: 7px;
  font-weight: 400;
  font-family: Roboto, Noto, sans-serif;
  fill: var(--primary-text-color);
}
:host .lc-gauge.disabled .gauge {
  filter: grayscale(1) brightness(0.6);
}`;
const tau = 2 * Math.PI;
const amplitude = 1;
const period = 0.3;
function tpmt(x) {
  return (Math.pow(2, -10 * x) - 9765625e-10) * 1.0009775171065494;
}
(function custom(a2, p2) {
  const s2 = Math.asin(1 / (a2 = Math.max(1, a2))) * (p2 /= tau);
  function elasticIn2(t2) {
    return a2 * tpmt(- --t2) * Math.sin((s2 - t2) / p2);
  }
  elasticIn2.amplitude = function(a22) {
    return custom(a22, p2 * tau);
  };
  elasticIn2.period = function(p22) {
    return custom(a2, p22);
  };
  return elasticIn2;
})(amplitude, period);
const elasticOut = function custom2(a2, p2) {
  const s2 = Math.asin(1 / (a2 = Math.max(1, a2))) * (p2 /= tau);
  function elasticOut2(t2) {
    return 1 - a2 * tpmt(t2 = +t2) * Math.sin((t2 + s2) / p2);
  }
  elasticOut2.amplitude = function(a22) {
    return custom2(a22, p2 * tau);
  };
  elasticOut2.period = function(p22) {
    return custom2(a2, p22);
  };
  return elasticOut2;
}(amplitude, period);
var __defProp$5 = Object.defineProperty;
var __getOwnPropDesc$4 = Object.getOwnPropertyDescriptor;
var __decorateClass$5 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$4(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$5(target, key, result);
  return result;
};
let Gauge = class extends LitElement {
  constructor() {
    super();
    this.label = "";
    this.unit = "";
    this.min = 0;
    this.max = 100;
    this.precision = 2;
    this.value = 0;
    this.disabled = false;
    this.digits = false;
    this._angleDeg = 0;
  }
  connectedCallback() {
    super.connectedCallback();
    this._renderRootElements();
    this._renderScaleElements();
    this._renderLabelElement();
    this._updateValueWithAnimation();
  }
  disconnectedCallback() {
    var _a;
    super.disconnectedCallback();
    if (this._rafID != null) {
      cancelAnimationFrame(this._rafID);
      this._rafID = null;
    }
    (_a = this._svg) == null ? void 0 : _a.remove();
    this._svg = void 0;
    this._dial = void 0;
  }
  willUpdate(_changed) {
    super.willUpdate(_changed);
    if (_changed.has("value") || _changed.has("min") || _changed.has("max") || _changed.has("precision")) {
      [this.value, this.min, this.max] = normalize(this.value, this.min, this.max, this.precision);
    }
    if (_changed.has("levels")) {
      if (!this.levels || !Array.isArray(this.levels) || this.levels.length === 0) {
        this._normalizedLevels = void 0;
      } else {
        this._normalizedLevels = this.levels.map((item) => ({ level: (item == null ? void 0 : item.level) ?? 0, color: (item == null ? void 0 : item.color) || "disabled" })).sort((a2, b2) => a2.level - b2.level);
        if (this._normalizedLevels[0].level !== this.min) {
          this._normalizedLevels = [{ level: this.min, color: "disabled" }, ...this._normalizedLevels];
        }
      }
    }
  }
  updated(_changed) {
    var _a, _b, _c;
    super.updated(_changed);
    if (_changed.has("_levels") || _changed.has("isDigitScale") || _changed.has("min") || _changed.has("max")) {
      this._renderScaleElements();
    }
    if (_changed.has("value") || _changed.has("min") || _changed.has("max") || _changed.has("precision") || _changed.has("unit")) {
      this._updateValueWithAnimation();
    }
    if (_changed.has("disabled")) {
      (_c = (_b = (_a = this._svg) == null ? void 0 : _a.classList) == null ? void 0 : _b[this.disabled ? "add" : "remove"]) == null ? void 0 : _c.call(_b, "disabled");
    }
    if (_changed.has("label")) {
      this._renderLabelElement();
    }
  }
  _updateValueWithAnimation() {
    if (this._rafID != null) {
      cancelAnimationFrame(this._rafID);
      this._rafID = null;
    }
    const unit = this.unit || "";
    const value = `${this.value}`;
    const tspan = document.createElementNS("http://www.w3.org/2000/svg", "tspan");
    tspan.innerHTML = `&#8201;${unit}`;
    tspan.style.fontSize = "10px";
    this._text.style.fontSize = `14px`;
    this._text.style.letterSpacing = `-0.5px`;
    this._text.innerHTML = value;
    this._text.append(tspan);
    requestAnimationFrame(() => {
      const max = 42;
      const length = this._text.getComputedTextLength();
      if (length > max) {
        this._text.setAttribute("transform", `scale(${max / length})`);
      }
    });
    const oldAngle = this._angleDeg;
    const newAngle = getAngle(this.value, this.min, this.max);
    const diffAngle = newAngle - oldAngle;
    const duration = 500;
    const timingFunction = elasticOut.amplitude(0.5).period(0.4);
    let start = null;
    const setAngle = (angle) => {
      const angleRad = toRadians(angle - 90);
      this.style.setProperty("--gauge-needle-position", `${angle}deg`);
      this._shadow.setAttribute("dx", round(Math.cos(angleRad), 4).toString());
      this._shadow.setAttribute("dy", round(Math.sin(angleRad), 4).toString());
    };
    const animate = (time) => {
      if (!start) {
        start = time;
        this._rafID = requestAnimationFrame(animate);
        return;
      }
      if (start + duration > time) {
        const progress = timingFunction((time - start) / duration);
        this._angleDeg = Math.min(180, Math.max(0, oldAngle + diffAngle * progress));
        setAngle(this._angleDeg);
        this._rafID = requestAnimationFrame(animate);
      }
    };
    this._rafID = requestAnimationFrame(animate);
  }
  _renderRootElements() {
    var _a;
    const insetShadowFilterId = "inset-filter";
    const dropShadowFilterId = "drop-shadow-filter";
    this._svg = document.createElementNS("http://www.w3.org/2000/svg", "svg");
    this._svg.classList.add("lc-gauge");
    const width = Gauge.sizes.width;
    const height = Gauge.sizes.width / 2 + Gauge.sizes.labelHeight;
    const start = width / 2 * -1;
    this._svg.setAttribute("viewBox", `${start} ${start} ${width} ${height}`);
    const defs = document.createElementNS("http://www.w3.org/2000/svg", "defs");
    defs.append(this._renderInsetShadow(insetShadowFilterId));
    defs.append(this._renderDropShadow(dropShadowFilterId));
    this._svg.append(defs);
    this._dial = document.createElementNS("http://www.w3.org/2000/svg", "g");
    this._dial.classList.add("dial-plate");
    this._dial.setAttribute("filter", `url(#${insetShadowFilterId})`);
    this._svg.append(this._dial);
    this._scale = document.createElementNS("http://www.w3.org/2000/svg", "g");
    this._scale.classList.add("scale");
    this._svg.append(this._scale);
    this._pointer = document.createElementNS("http://www.w3.org/2000/svg", "g");
    this._pointer.classList.add("pointer");
    this._pointer.setAttribute("filter", `url(#${dropShadowFilterId})`);
    this._svg.append(this._pointer);
    const needlePath = document.createElementNS("http://www.w3.org/2000/svg", "path");
    const tip = Gauge.sizes.scaleRadius;
    const base = Gauge.sizes.scaleRadius - Gauge.sizes.scaleWidth - Gauge.sizes.scaleWidth / 2;
    needlePath.setAttribute("d", `M -${base} -2 L -${tip} 0 L -${base} 2 z`);
    this._pointer.append(needlePath);
    this._text = document.createElementNS("http://www.w3.org/2000/svg", "text");
    this._text.classList.add("value");
    this._text.setAttribute("text-anchor", "middle");
    this._text.setAttribute("x", "0");
    this._text.setAttribute("y", "-2");
    this._svg.append(this._text);
    this._label = document.createElementNS("http://www.w3.org/2000/svg", "text");
    this._label.classList.add("label");
    this._label.setAttribute("text-anchor", "middle");
    this._label.setAttribute("x", "0px");
    this._label.setAttribute("y", "9px");
    this._svg.append(this._label);
    (_a = this.shadowRoot) == null ? void 0 : _a.append(this._svg);
  }
  _renderScaleElements() {
    var _a;
    if (!this._dial || !this._scale) return;
    for (let i2 = 0; i2 < this._dial.childNodes.length; i2++) {
      this._dial.childNodes.item(i2).remove();
    }
    for (let i2 = 0; i2 < this._scale.childNodes.length; i2++) {
      this._scale.childNodes.item(i2).remove();
    }
    const rExt = Gauge.sizes.scaleRadius;
    const rInt = Gauge.sizes.scaleRadius - Gauge.sizes.scaleWidth;
    const renderNumber = (value, angle, anchor) => {
      if (!this.digits) return;
      const angleRad = toRadians(angle);
      const x = round(0 - (rExt + 2) * Math.cos(angleRad));
      const y2 = round(0 - (rExt + 2) * Math.sin(angleRad));
      const text = document.createElementNS("http://www.w3.org/2000/svg", "text");
      text.setAttribute("x", x.toString());
      text.setAttribute("y", y2.toString());
      text.setAttribute("text-anchor", anchor);
      text.setAttribute("transform", `rotate(${angle - 90},${x},${y2})`);
      text.innerHTML = value.toString();
      this._scale.append(text);
    };
    if (this._normalizedLevels) {
      for (let i2 = 0; i2 < this._normalizedLevels.length; i2++) {
        const level = this._normalizedLevels[i2].level;
        const nextLevel = ((_a = this._normalizedLevels[i2 + 1]) == null ? void 0 : _a.level) ?? this.max;
        const color = formatColors(this._normalizedLevels[i2].color);
        const beginAngleDeg = getAngle(...normalize(level, this.min, this.max));
        const beginAngle = toRadians(beginAngleDeg);
        const beginAngleCos = Math.cos(beginAngle);
        const beginAngleSin = Math.sin(beginAngle);
        const endAngle = toRadians(getAngle(...normalize(nextLevel, this.min, this.max)));
        const endAngleCos = Math.cos(endAngle);
        const endAngleSin = Math.sin(endAngle);
        let d2 = "";
        d2 += `M ${round(0 - rExt * beginAngleCos)} ${round(0 - rExt * beginAngleSin)} `;
        d2 += `A ${rExt} ${rExt} 0 0 1 ${round(0 - rExt * endAngleCos)} ${round(0 - rExt * endAngleSin)} `;
        d2 += `L ${round(0 - rInt * endAngleCos)} ${round(0 - rInt * endAngleSin)} `;
        d2 += `A ${rInt} ${rInt} 0 0 0 ${round(0 - rInt * beginAngleCos)} ${round(0 - rInt * beginAngleSin)} `;
        d2 += "z";
        const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
        path.setAttribute("d", d2);
        path.setAttribute("fill", color);
        this._dial.append(path);
        renderNumber(level, beginAngleDeg, i2 === 0 ? "start" : "middle");
      }
    } else {
      const path = document.createElementNS("http://www.w3.org/2000/svg", "path");
      path.setAttribute("d", `M -${rExt} 0 A ${rExt} ${rExt} 0 0 1 ${rExt} 0 L ${rInt} 0 A ${rInt} ${rInt} 0 1 0 -${rInt} 0 z`);
      path.setAttribute("fill", "var(--primary-color)");
      this._dial.append(path);
      renderNumber(this.min ?? 0, 0, "start");
    }
    renderNumber(this.max ?? 100, 180, "end");
  }
  _renderLabelElement() {
    if (!this._label) return;
    this._label.innerHTML = this.label || "";
  }
  _renderInsetShadow(filterId) {
    const filter = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    filter.id = filterId;
    const feOffset = document.createElementNS("http://www.w3.org/2000/svg", "feOffset");
    feOffset.setAttribute("in", "SourceGraphic");
    feOffset.setAttribute("dx", "0");
    feOffset.setAttribute("dy", "0");
    filter.append(feOffset);
    const feGaussianBlur = document.createElementNS("http://www.w3.org/2000/svg", "feGaussianBlur");
    feGaussianBlur.setAttribute("stdDeviation", "1.5");
    feGaussianBlur.setAttribute("result", "offset-blur");
    filter.append(feGaussianBlur);
    const feCompositeOut = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
    feCompositeOut.setAttribute("operator", "out");
    feCompositeOut.setAttribute("in", "SourceGraphic");
    feCompositeOut.setAttribute("in2", "offset-blur");
    feCompositeOut.setAttribute("result", "inverse");
    filter.append(feCompositeOut);
    const feFlood = document.createElementNS("http://www.w3.org/2000/svg", "feFlood");
    feFlood.setAttribute("flood-color", "rgb(0, 0, 0)");
    feFlood.setAttribute("flood-opacity", ".9");
    filter.append(feFlood);
    const feCompositeIn = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
    feCompositeIn.setAttribute("operator", "in");
    feCompositeIn.setAttribute("in", "color");
    feCompositeIn.setAttribute("in2", "inverse");
    feCompositeIn.setAttribute("result", "shadow");
    filter.append(feCompositeIn);
    const feCompositeOver = document.createElementNS("http://www.w3.org/2000/svg", "feComposite");
    feCompositeOver.setAttribute("operator", "over");
    feCompositeOver.setAttribute("in", "shadow");
    feCompositeOver.setAttribute("in2", "SourceGraphic");
    filter.append(feCompositeOver);
    return filter;
  }
  _renderDropShadow(filterId) {
    const filter = document.createElementNS("http://www.w3.org/2000/svg", "filter");
    filter.id = filterId;
    this._shadow = document.createElementNS("http://www.w3.org/2000/svg", "feDropShadow");
    this._shadow.classList.add("needle-shadow");
    this._shadow.setAttribute("dx", "0");
    this._shadow.setAttribute("dy", "0");
    this._shadow.setAttribute("stdDeviation", "0");
    this._shadow.setAttribute("flood-color", "rgb(0, 0, 0)");
    this._shadow.setAttribute("flood-opacity", "0.3");
    filter.append(this._shadow);
    return filter;
  }
};
Gauge.styles = styles$5;
Gauge.sizes = {
  width: 110,
  labelHeight: 14,
  scaleRadius: 47.5,
  scaleWidth: 15
};
__decorateClass$5([
  n2({ type: String })
], Gauge.prototype, "label", 2);
__decorateClass$5([
  n2({ type: String })
], Gauge.prototype, "unit", 2);
__decorateClass$5([
  n2({ type: Number, reflect: true })
], Gauge.prototype, "min", 2);
__decorateClass$5([
  n2({ type: Number, reflect: true })
], Gauge.prototype, "max", 2);
__decorateClass$5([
  n2({ attribute: "display-precision", type: Number, reflect: true })
], Gauge.prototype, "precision", 2);
__decorateClass$5([
  n2({ type: Number })
], Gauge.prototype, "value", 2);
__decorateClass$5([
  n2({ type: Boolean, reflect: true })
], Gauge.prototype, "disabled", 2);
__decorateClass$5([
  n2({ attribute: "digits", type: Boolean, reflect: true })
], Gauge.prototype, "digits", 2);
__decorateClass$5([
  n2({
    attribute: false,
    hasChanged(newVal, oldVal) {
      if (!newVal && !oldVal) return false;
      if (!newVal && oldVal || newVal && !oldVal) return true;
      if (Array.isArray(newVal) && Array.isArray(oldVal)) {
        if (newVal.length !== oldVal.length) return true;
        return newVal.some((item, index) => item.level !== oldVal[index].level || item.color !== oldVal[index].color);
      }
      return true;
    }
  })
], Gauge.prototype, "levels", 2);
Gauge = __decorateClass$5([
  t$1("lc-gauge")
], Gauge);
const styles$4 = css`:host {
  --lc-switch-color: var(--blue-color);
  --lc-switch-aspect-ratio: 1.8333333;
  --lc-switch-thumb-size: 20px;
  --lc-switch-thumb-margin: 2px;
  /* Computed size54s */
  --lc-switch-height: calc(var(--lc-switch-thumb-size) + (var(--lc-switch-thumb-margin) * 2));
  --lc-switch-width: calc(var(--lc-switch-height) * var(--lc-switch-aspect-ratio));
  /* Colors */
  --lc-switch-bg-color: color-mix(in lch, var(--secondary-background-color), var(--secondary-text-color) 20%);
  --lc-switch-border-color: var(--lc-switch-bg-color);
  --lc-switch-thumb-color: color-mix(in lch, rgb(255 255 255 / 1), var(--secondary-background-color) 12%);
  --lc-switch-thumb-shadow: 0 1px 3px 0 rgb(0 0 0 / 0.15), 0 1px 2px -1px rgb(0 0 0 / 0.15);
  /* Colors state */
  --lc-switch-bg-active-color: var(--lc-switch-color);
  --lc-switch-thumb-active-color: rgb(255 255 255 / 1);
  display: block;
}

.lc-switch {
  height: var(--lc-switch-height);
  width: var(--lc-switch-width);
  aspect-ratio: var(--lc-switch-aspect-ratio);
  background-color: var(--lc-switch-bg-color);
  border-radius: 999999px;
  cursor: pointer;
  position: relative;
  overflow: hidden;
  transition-duration: 0.15s;
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}
.lc-switch .lc-switch-thumb {
  top: var(--lc-switch-thumb-margin);
  left: var(--lc-switch-thumb-margin);
  width: var(--lc-switch-thumb-size);
  height: var(--lc-switch-thumb-size);
  aspect-ratio: 1/1;
  border-radius: 50%;
  background-color: var(--lc-switch-thumb-color);
  transition-duration: 0.15s;
  transition-property: all;
  transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
  box-shadow: var(--lc-switch-thumb-shadow);
  display: block;
  position: absolute;
  z-index: 2;
}

:host([checked]) {
  --lc-switch-border-color: var(--lc-switch-bg-active-color);
  --lc-switch-bg-color: var(--lc-switch-bg-active-color);
}
:host([checked]) .lc-switch-thumb {
  left: calc(var(--lc-switch-width) - var(--lc-switch-thumb-size) - var(--lc-switch-thumb-margin));
  --lc-switch-thumb-color: var(--lc-switch-thumb-active-color);
}`;
var __defProp$4 = Object.defineProperty;
var __getOwnPropDesc$3 = Object.getOwnPropertyDescriptor;
var __decorateClass$4 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$3(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$4(target, key, result);
  return result;
};
let Switch = class extends LitElement {
  constructor() {
    super(...arguments);
    this.checked = false;
    this.disabled = false;
  }
  render() {
    return html`
      <div class="lc-switch" @click="${this._handleClick}">
        <div class="lc-switch-thumb"/>
      </div>
    `;
  }
  _handleClick() {
    const options = {
      detail: {
        checked: !this.checked
      },
      bubbles: true,
      composed: true
    };
    this.dispatchEvent(new CustomEvent("change", options));
  }
};
Switch.styles = styles$4;
__decorateClass$4([
  n2({ attribute: "checked", reflect: true, type: Boolean })
], Switch.prototype, "checked", 2);
__decorateClass$4([
  n2({ attribute: "disabled", reflect: true, type: Boolean })
], Switch.prototype, "disabled", 2);
Switch = __decorateClass$4([
  t$1("lc-switch")
], Switch);
const styles$3 = css`.radio {
  cursor: pointer;
  display: flex;
  align-items: center;
  justify-content: flex-start;
}
.radio .label {
  font-size: 1rem;
}
.radio .checkbox {
  height: calc(1rem + 2px);
  width: auto;
  margin: 0.25rem 0.75rem;
  aspect-ratio: 1/1;
  border: 1px solid currentColor;
  border-radius: 50%;
  display: inline-block;
  position: relative;
}
.radio .checkbox .marker {
  left: 2px;
  top: 2px;
  height: calc(1rem - 2px);
  width: auto;
  aspect-ratio: 1/1;
  background-color: currentColor;
  border-radius: 50%;
  opacity: 1;
  transform: scale(0, 0);
  transition: all 0.4s cubic-bezier(0.45, 1.8, 0.5, 0.75);
  position: absolute;
  z-index: 1;
}

:host([checked]) .radio .checkbox .marker {
  opacity: 1;
  transform: scale(1, 1);
}

:host([disabled]) {
  opacity: 0.6;
  pointer-events: none;
}`;
var __defProp$3 = Object.defineProperty;
var __decorateClass$3 = (decorators, target, key, kind) => {
  var result = void 0;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = decorator(target, key, result) || result;
  if (result) __defProp$3(target, key, result);
  return result;
};
const _Radio = class _Radio extends LitElement {
  constructor() {
    super(...arguments);
    this.checked = false;
    this.disabled = false;
    this.direction = "ltr";
  }
  render() {
    if (this.direction === "ltr") {
      return html`
        <div class="radio ltr" role="radio" @click=${this._handleClick}>
          ${this._renderCheckbox()}
          ${this._renderLabel()}
        </div>
      `;
    } else {
      return html`
        <div class="radio rtl" role="radio" @click=${this._handleClick}>
          ${this._renderLabel()}
          ${this._renderCheckbox()}
        </div>
      `;
    }
  }
  _renderCheckbox() {
    return html`
      <div class="checkbox">
        <div class="marker"></div>
      </div>
    `;
  }
  _renderLabel() {
    return html`
      <div class="label">${this.label || ""}</div>
    `;
  }
  _handleClick() {
    fireEvent(this, "change", { value: this.value, name: this.name });
  }
};
_Radio.styles = styles$3;
let Radio = _Radio;
__decorateClass$3([
  n2()
], Radio.prototype, "label");
__decorateClass$3([
  n2({ attribute: "name", reflect: true, type: String })
], Radio.prototype, "name");
__decorateClass$3([
  n2({ attribute: "value", reflect: true, type: String })
], Radio.prototype, "value");
__decorateClass$3([
  n2({ attribute: "checked", reflect: true, type: Boolean })
], Radio.prototype, "checked");
__decorateClass$3([
  n2({ attribute: "disabled", reflect: true, type: Boolean })
], Radio.prototype, "disabled");
__decorateClass$3([
  n2()
], Radio.prototype, "direction");
customElements.define("lc-radio", Radio, { extends: "input" });
const styles$2 = css``;
var __defProp$2 = Object.defineProperty;
var __getOwnPropDesc$2 = Object.getOwnPropertyDescriptor;
var __decorateClass$2 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$2(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$2(target, key, result);
  return result;
};
function isSupported(stateObj) {
  const domain = computeDomain(stateObj.entity_id);
  return domain === "button" || domain === "input_button";
}
let ActionButtonFeature = class extends LitElement {
  static getStubConfig() {
    return {
      type: "custom:lc-button-circle-feature",
      label: "Circle Button Feature",
      icon: "mdi:gesture-tap-button",
      color: "success"
    };
  }
  setConfig(config) {
    if (!config) {
      throw new Error("Invalid configuration");
    }
    this._config = config;
  }
  render() {
    if (!this._config || !this.hass || !this.stateObj || !isSupported(this.stateObj)) {
      return null;
    }
    return html`
      <lc-button-circle class="button" .icon=${this._config.icon} .tooltip=${this._config.label} .color=${this._config.color} @click=${this._press} />
    `;
  }
  _press(event) {
    event.stopPropagation();
    this.hass.callService("input_button", "press", {
      entity_id: this.stateObj.entity_id
    });
  }
};
ActionButtonFeature.styles = styles$2;
__decorateClass$2([
  n2({ attribute: true })
], ActionButtonFeature.prototype, "hass", 2);
__decorateClass$2([
  n2({ attribute: true })
], ActionButtonFeature.prototype, "stateObj", 2);
__decorateClass$2([
  r()
], ActionButtonFeature.prototype, "_config", 2);
ActionButtonFeature = __decorateClass$2([
  t$1("lc-action-button-feature")
], ActionButtonFeature);
window.customCardFeatures = window.customCardFeatures || [];
window.customCardFeatures.push({
  type: "lc-action-button-feature",
  name: "Circle Button",
  supported: isSupported,
  configurable: true
});
const configElementStyle = css`
    .card-config {
        /* Cancels overlapping Margins for HAForm + Card Config options */
        overflow: auto;
    }

    ha-switch {
        padding: 16px 6px;
    }

    .side-by-side {
        display: flex;
        align-items: flex-end;
    }

    .side-by-side > * {
        flex: 1;
        padding-right: 8px;
        padding-inline-end: 8px;
        padding-inline-start: initial;
    }

    .side-by-side > *:last-child {
        flex: 1;
        padding-right: 0;
        padding-inline-end: 0;
        padding-inline-start: initial;
    }

    .suffix {
        margin: 0 8px;
    }

    hui-action-editor,
    ha-select,
    ha-textfield,
    ha-icon-picker {
        margin-top: 8px;
        display: block;
    }

    ha-expansion-panel {
        display: block;
        --expansion-panel-content-padding: 0;
        border-radius: 6px;
        --ha-card-border-radius: 6px;
    }

    ha-expansion-panel .content {
        padding: 12px;
    }

    ha-expansion-panel > *[slot="header"] {
        margin: 0;
        font-size: inherit;
        font-weight: inherit;
    }

    ha-expansion-panel ha-svg-icon {
        color: var(--secondary-text-color);
    }
`;
const BaseCardConfigSchema = object({
  type: string(),
  view_layout: any(),
  layout_options: any(),
  grid_options: any(),
  visibility: any()
});
const ServiceCardConfigSchema = assign(
  BaseCardConfigSchema,
  object({
    title: optional(union([string(), boolean()])),
    icon: optional(string()),
    theme: optional(string()),
    gauges: optional(array(GaugeConfigSchema)),
    entities: optional(array(EntityConfigSchema)),
    buttons: optional(array(ButtonConfigSchema))
  })
);
const styles$1 = css`.title-icon-fields {
  display: flex;
  gap: 16px;
}
.title-icon-fields > * {
  width: 50%;
}`;
var __defProp$1 = Object.defineProperty;
var __getOwnPropDesc$1 = Object.getOwnPropertyDescriptor;
var __decorateClass$1 = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc$1(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp$1(target, key, result);
  return result;
};
let UniversalCardConfig = class extends LitElement {
  setConfig(config) {
    assert(config, ServiceCardConfigSchema);
    this._config = config;
    this._configGauges = processGauges(config.gauges);
    this._configEntities = processEntities(config.entities);
    this._configButtons = config.buttons;
  }
  async firstUpdated(_changedProperties) {
    super.firstUpdated(_changedProperties);
    const utils = await window.parent.loadCardHelpers();
    utils.importMoreInfoControl;
  }
  render() {
    if (!this.hass || !this._config) {
      return html``;
    }
    if (this._subElementEditorConfig) {
      return html`
        <lc-sub-element-editor
          .hass=${this.hass}
          .config=${this._subElementEditorConfig}
          @go-back=${this._goBack}
          @config-changed=${this._handleSubElementChanged}
        >
        </lc-sub-element-editor>
      `;
    }
    return html`
      <div class="title-icon-fields">
        <ha-textfield
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.title")}
          .value=${this._config.title || ""}
          .configValue=${"title"}
          @input=${this._valueChanged}
        ></ha-textfield>

        <ha-icon-picker
          .hass=${this.hass}
          .label=${this.hass.localize("component.advanced_ui_cards.entity_component._.editor.icon")}
          .value=${this._config.icon || ""}
          .required=${false}
          .disabled=${false}
          .configValue=${"icon"}
          .placeholder=${"lc:placeholder"}
          @value-changed=${this._valueChanged}
        >
        </ha-icon-picker>
      </div>

      <lc-gauges-editor
        .hass=${this.hass}
        .gauges=${this._configGauges}
        .configValue=${"gauges"}
        @gauges-changed=${this._valueChanged}
        @edit-detail-element=${this._editDetailElement}
      ></lc-gauges-editor>

      <lc-entities-editor
        .hass=${this.hass}
        .entities=${this._configEntities}
        .configValue=${"entities"}
        @entities-changed=${this._valueChanged}
        @edit-detail-element=${this._editDetailElement}
      ></lc-entities-editor>

      <lc-footer-buttons-editor
        .hass=${this.hass}
        .buttons=${this._configButtons}
        .configValue=${"buttons"}
        @buttons-changed=${this._valueChanged}
        @edit-detail-element=${this._editDetailElement}
      ></lc-footer-buttons-editor>
    `;
  }
  _valueChanged(ev) {
    var _a;
    ev.stopPropagation();
    if (!this._config || !this.hass) return;
    const target = ev.target;
    const configValue = target.configValue || ((_a = this._subElementEditorConfig) == null ? void 0 : _a.type);
    const value = target.checked !== void 0 ? target.checked : target.value || (configValue && configValue in ev.detail ? ev.detail[configValue] : ev.detail.value);
    if (!configValue) {
      throw new Error("No config field provided");
    }
    if (configValue === "title" && target.value === this._config.title || configValue === "icon" && target.value === this._config.icon) {
      return;
    }
    const config = { ...this._config };
    if (!value) {
      Reflect.deleteProperty(config, configValue);
    } else {
      config[configValue] = value;
    }
    fireEvent(this, "config-changed", { config });
  }
  _handleSubElementChanged(ev) {
    var _a;
    ev.stopPropagation();
    if (!this._config || !this.hass) return;
    const configValue = (_a = this._subElementEditorConfig) == null ? void 0 : _a.type;
    const value = ev.detail.config;
    switch (configValue) {
      case "footer-button": {
        const index = this._subElementEditorConfig.index;
        const buttons = [...this._configButtons || []];
        if (value) {
          buttons[index] = value;
        } else {
          buttons.splice(index, 1);
          this._goBack();
        }
        this._config = { ...this._config, buttons };
        this._configButtons = buttons;
        break;
      }
      case "entity": {
        const index = this._subElementEditorConfig.index;
        const entities = [...this._configEntities || []];
        if (value) {
          entities[index] = value;
        } else {
          entities.splice(index, 1);
          this._goBack();
        }
        this._config = { ...this._config, entities };
        this._configEntities = entities;
        break;
      }
      case "gauge": {
        const index = this._subElementEditorConfig.index;
        const gauges = [...this._configGauges || []];
        if (value) {
          gauges[index] = value;
        } else {
          gauges.splice(index, 1);
          this._goBack();
        }
        this._config = { ...this._config, gauges };
        this._configGauges = gauges;
        break;
      }
    }
    this._subElementEditorConfig = {
      ...this._subElementEditorConfig,
      elementConfig: value
    };
    fireEvent(this, "config-changed", { config: this._config });
  }
  _editDetailElement(ev) {
    this._subElementEditorConfig = ev.detail.subElementConfig;
  }
  _goBack() {
    this._subElementEditorConfig = void 0;
  }
};
UniversalCardConfig.styles = [styles$1, configElementStyle];
__decorateClass$1([
  n2({ attribute: false })
], UniversalCardConfig.prototype, "hass", 2);
__decorateClass$1([
  r()
], UniversalCardConfig.prototype, "_config", 2);
__decorateClass$1([
  r()
], UniversalCardConfig.prototype, "_configGauges", 2);
__decorateClass$1([
  r()
], UniversalCardConfig.prototype, "_configEntities", 2);
__decorateClass$1([
  r()
], UniversalCardConfig.prototype, "_configButtons", 2);
__decorateClass$1([
  r()
], UniversalCardConfig.prototype, "_subElementEditorConfig", 2);
UniversalCardConfig = __decorateClass$1([
  t$1("lc-universal-card-config")
], UniversalCardConfig);
function getStateToNumber(entity, hass) {
  if (!entity.entity) return 0;
  const stateObj = hass.states[entity.entity];
  const stateString = entity.attribute ? (stateObj.attributes || {})[entity.attribute] : stateObj == null ? void 0 : stateObj.state;
  return parseFloat(stateString) || 0;
}
function formatAttributeName(entityId, attribute, hass) {
  const domain = computeDomain(entityId);
  let name = hass.localize(`component.${domain}.entity_component._.state_attributes.${attribute}.name`);
  if (!name) {
    name = attribute.split("_").map((item) => item.charAt(0).toUpperCase() + item.substring(1)).join("");
  }
  return name;
}
function formatEntityName(entityLike, hass) {
  const entityId = entityLike.entity;
  if (!entityId) return "";
  const entity = hass.entities[entityId];
  const domain = computeDomain(entityId);
  let name = null;
  if (entity.platform && domain && entity.translation_key) {
    name = hass.localize(`component.${entity.platform}.entity.${domain}.${entity.translation_key}.name`);
  }
  name = name || entity.name || "";
  if (entityLike.attribute) {
    name += `: ${formatAttributeName(entityId, entityLike.attribute, hass)}`;
  }
  return name;
}
const styles = css`ha-card {
  height: 100%;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
}

.card-header {
  padding-bottom: 0;
  display: flex;
  justify-content: space-between;
}
.card-header .name {
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}
.card-header .name .icon {
  --mdc-icon-size: 38px;
  top: -2px;
  padding: 0 10px 0 0;
  position: relative;
}

.card-gauges {
  padding: 16px 16px 0;
  display: flex;
  justify-content: space-around;
  gap: 10px;
}
.card-gauges .gauge-wrap {
  width: 50%;
  flex-shrink: 1;
}

.card-entities {
  padding: 0 16px;
  flex: 1;
}
.card-entities > * {
  margin: 8px 0;
}
.card-entities > * div {
  position: relative;
}
.card-entities > * div * {
  overflow: clip visible;
}
.card-entities:first-child {
  margin-top: 0;
}
.card-entities:last-child {
  margin-bottom: 0;
}`;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __decorateClass = (decorators, target, key, kind) => {
  var result = kind > 1 ? void 0 : kind ? __getOwnPropDesc(target, key) : target;
  for (var i2 = decorators.length - 1, decorator; i2 >= 0; i2--)
    if (decorator = decorators[i2])
      result = (kind ? decorator(target, key, result) : decorator(result)) || result;
  if (kind && result) __defProp(target, key, result);
  return result;
};
let UniversalCard = class extends LitElement {
  static async getConfigElement() {
    const source = await customElements.whenDefined("hui-entities-card");
    await source.getConfigElement();
    return document.createElement("lc-universal-card-config");
  }
  static getStubConfig(hass, entities, entitiesFallback) {
    const gaugesEntities = findEntities(
      hass,
      2,
      entities,
      entitiesFallback,
      ["sensor"],
      (entity) => /^\d+(:?\.\d+)?$/.test(entity.state)
    );
    return {
      gauges: gaugesEntities.map((entity) => ({
        entity
      })),
      entities: findEntities(hass, 1, entities, entitiesFallback),
      buttons: [
        { color: "info", icon: "mdi:reload", action: "homeassistant.reload_all" }
      ]
    };
  }
  async setConfig(config) {
    this._config = config;
    this._configGauges = processGauges(config.gauges);
    this._configEntities = processEntities(config.entities);
    this._configButtons = config.buttons;
    if (!this._createRowElement) {
      const utils = await mainWindow.loadCardHelpers();
      this._createRowElement = utils.createRowElement;
      utils.importMoreInfoControl;
    }
  }
  getCardSize() {
    var _a;
    if (!this._config) {
      return 0;
    }
    return (this._config.title ? 2 : 0) + (((_a = this._config.entities) == null ? void 0 : _a.length) || 1);
  }
  render() {
    if (!this._config || !this.hass) {
      return html``;
    }
    return html`
      <ha-card>
        ${this._renderHeader()}
        ${this._renderGauges()}
        ${this._renderEntities()}
        ${this._renderButtons()}
      </ha-card>
    `;
  }
  _renderHeader() {
    var _a, _b;
    if (!((_a = this._config) == null ? void 0 : _a.title) && !((_b = this._config) == null ? void 0 : _b.icon)) {
      return html``;
    }
    return html`
      <h1 class="card-header">
        <div class="name">
          ${this._config.icon ? html`
            <ha-icon class="icon" .icon=${this._config.icon}></ha-icon>` : null}
          <span>${this._config.title}</span>
        </div>
      </h1>
    `;
  }
  _renderGauges() {
    if (!this._configGauges || !this._configGauges.length) {
      return html``;
    }
    const entities = this._configGauges.map((entity) => this._renderGauge(entity));
    return html`
      <div class="card-gauges">${entities}</div>`;
  }
  _renderGauge(_entity) {
    const entityObj = this.hass.entities[_entity.entity];
    const stateObj = this.hass.states[_entity.entity];
    return html`
      <div class="gauge-wrap" @click=${() => fireEvent(this, "hass-more-info", { entityId: _entity.entity })}>
        <lc-gauge
          .label="${_entity.name || formatEntityName(_entity, this.hass)}"
          .unit="${_entity.unit || stateObj.attributes.unit_of_measurement}"
          .min="${_entity.min || stateObj.attributes.minimum}"
          .max="${_entity.max || stateObj.attributes.maximum}"
          .precision=${_entity.precision || entityObj.display_precision}
          .digits=${_entity.digits}
          .levels=${_entity.levels}
          .value=${getStateToNumber(_entity, this.hass)}
          .disabled=${stateObj.attributes.available === false}
        ></lc-gauge>
      </div>`;
  }
  _renderEntities() {
    if (!this._configEntities) {
      return html``;
    }
    const entities = this._configEntities.map((entityConf) => this._renderEntity(entityConf));
    return html`
      <div id="states" class="card-entities">${entities}</div>`;
  }
  _renderEntity(entityConf) {
    var _a;
    if (!this._createRowElement) return html``;
    let config;
    if (!("type" in entityConf) && "state_color" in this._config) {
      config = { state_color: this._config.state_color, ...entityConf };
    } else {
      config = { ...entityConf };
    }
    const element = (_a = this._createRowElement) == null ? void 0 : _a.call(this, config);
    if (this.hass) {
      element.hass = this.hass;
    }
    return html`
      <div>${element}</div>`;
  }
  _renderButtons() {
    if (!this._configButtons) {
      return html``;
    }
    return html`
      <lc-footer-buttons
        .hass=${this.hass}
        .buttons=${this._configButtons}
      ></lc-footer-buttons>
    `;
  }
};
UniversalCard.styles = styles;
__decorateClass([
  n2({ attribute: false })
], UniversalCard.prototype, "hass", 2);
__decorateClass([
  r()
], UniversalCard.prototype, "_config", 2);
__decorateClass([
  r()
], UniversalCard.prototype, "_createRowElement", 2);
UniversalCard = __decorateClass([
  t$1("lc-universal-card")
], UniversalCard);
window.customCards = window.customCards || [];
window.customCards.push({
  type: "lc-universal-card",
  name: "Extended Card",
  description: "The universal card supports displaying many kinds of UI elements in one place. For example, if you need to display the status in the form of a row and a gauge with action buttons.",
  preview: true,
  configurable: true
});
export {
  EntitiesEditor,
  Gauge,
  HuiSubElementEditor,
  ICONS,
  ICONS_MAP,
  IconError,
  IconSpinner,
  IconSuccess,
  Switch
};
